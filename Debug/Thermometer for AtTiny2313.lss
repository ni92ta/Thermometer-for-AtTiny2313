
Thermometer for AtTiny2313.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000088  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000088  00000534  2**0
                  ALLOC
  2 .bss          00000023  00800060  00800060  0000075e  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000075e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000078d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011e2  00000000  00000000  0000081d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000754  00000000  00000000  000019ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000834  00000000  00000000  00002153  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00002988  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b6  00000000  00000000  00002aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000066f  00000000  00000000  00002c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000032d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  00000650  00000650  00000744  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000335c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_13 00000026  000005ac  000005ac  000006a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.fraim_out 000003b8  00000088  00000088  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000014  00000636  00000636  0000072a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.eff1     00000012  0080009b  0080009b  0000075e  2**0
                  ALLOC
 18 .data.efi     00000018  00800083  00000652  00000746  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .text.dt_testdevice 00000042  00000440  00000440  00000534  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.dt_sendbit 00000028  0000055c  0000055c  00000650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.dt_sendbyte 0000003e  00000482  00000482  00000576  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.ds18x2_sel 00000026  000005d2  000005d2  000006c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.dt_readbit 0000003e  000004c0  000004c0  000005b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.dt_readbyte 0000002a  00000532  00000532  00000626  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.dt_check 00000034  000004fe  000004fe  000005f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.converttemp 00000006  0000064a  0000064a  0000073e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.libgcc.div 00000018  0000061e  0000061e  00000712  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.libgcc.div 00000026  000005f8  000005f8  000006ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.libgcc.div 00000028  00000584  00000584  00000678  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	26 c3       	rjmp	.+1612   	; 0x650 <__bad_interrupt>
   4:	25 c3       	rjmp	.+1610   	; 0x650 <__bad_interrupt>
   6:	24 c3       	rjmp	.+1608   	; 0x650 <__bad_interrupt>
   8:	23 c3       	rjmp	.+1606   	; 0x650 <__bad_interrupt>
   a:	22 c3       	rjmp	.+1604   	; 0x650 <__bad_interrupt>
   c:	21 c3       	rjmp	.+1602   	; 0x650 <__bad_interrupt>
   e:	20 c3       	rjmp	.+1600   	; 0x650 <__bad_interrupt>
  10:	1f c3       	rjmp	.+1598   	; 0x650 <__bad_interrupt>
  12:	1e c3       	rjmp	.+1596   	; 0x650 <__bad_interrupt>
  14:	1d c3       	rjmp	.+1594   	; 0x650 <__bad_interrupt>
  16:	1c c3       	rjmp	.+1592   	; 0x650 <__bad_interrupt>
  18:	1b c3       	rjmp	.+1590   	; 0x650 <__bad_interrupt>
  1a:	c8 c2       	rjmp	.+1424   	; 0x5ac <__vector_13>
  1c:	19 c3       	rjmp	.+1586   	; 0x650 <__bad_interrupt>
  1e:	18 c3       	rjmp	.+1584   	; 0x650 <__bad_interrupt>
  20:	17 c3       	rjmp	.+1582   	; 0x650 <__bad_interrupt>
  22:	16 c3       	rjmp	.+1580   	; 0x650 <__bad_interrupt>
  24:	15 c3       	rjmp	.+1578   	; 0x650 <__bad_interrupt>
  26:	14 c3       	rjmp	.+1576   	; 0x650 <__bad_interrupt>
  28:	13 c3       	rjmp	.+1574   	; 0x650 <__bad_interrupt>

0000002a <.dinit>:
  2a:	00 60       	ori	r16, 0x00	; 0
  2c:	00 83       	st	Z, r16
  2e:	80 00       	.word	0x0080	; ????
  30:	83 00       	.word	0x0083	; ????
  32:	9b 00       	.word	0x009b	; ????
  34:	06 52       	subi	r16, 0x26	; 38
  36:	00 9b       	sbis	0x00, 0	; 0
  38:	00 ad       	ldd	r16, Z+56	; 0x38
  3a:	80 00       	.word	0x0080	; ????

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ed       	ldi	r28, 0xDF	; 223
  42:	cd bf       	out	0x3d, r28	; 61

00000044 <__do_copy_data>:
  44:	ea e2       	ldi	r30, 0x2A	; 42
  46:	f0 e0       	ldi	r31, 0x00	; 0
  48:	40 e0       	ldi	r20, 0x00	; 0
  4a:	17 c0       	rjmp	.+46     	; 0x7a <__do_clear_bss+0x8>
  4c:	b5 91       	lpm	r27, Z+
  4e:	a5 91       	lpm	r26, Z+
  50:	35 91       	lpm	r19, Z+
  52:	25 91       	lpm	r18, Z+
  54:	05 91       	lpm	r16, Z+
  56:	07 fd       	sbrc	r16, 7
  58:	0c c0       	rjmp	.+24     	; 0x72 <__do_clear_bss>
  5a:	95 91       	lpm	r25, Z+
  5c:	85 91       	lpm	r24, Z+
  5e:	ef 01       	movw	r28, r30
  60:	f9 2f       	mov	r31, r25
  62:	e8 2f       	mov	r30, r24
  64:	05 90       	lpm	r0, Z+
  66:	0d 92       	st	X+, r0
  68:	a2 17       	cp	r26, r18
  6a:	b3 07       	cpc	r27, r19
  6c:	d9 f7       	brne	.-10     	; 0x64 <__do_copy_data+0x20>
  6e:	fe 01       	movw	r30, r28
  70:	04 c0       	rjmp	.+8      	; 0x7a <__do_clear_bss+0x8>

00000072 <__do_clear_bss>:
  72:	1d 92       	st	X+, r1
  74:	a2 17       	cp	r26, r18
  76:	b3 07       	cpc	r27, r19
  78:	e1 f7       	brne	.-8      	; 0x72 <__do_clear_bss>
  7a:	eb 33       	cpi	r30, 0x3B	; 59
  7c:	f4 07       	cpc	r31, r20
  7e:	31 f7       	brne	.-52     	; 0x4c <__do_copy_data+0x8>
  80:	da d2       	rcall	.+1460   	; 0x636 <main>
  82:	00 c0       	rjmp	.+0      	; 0x84 <_exit>

00000084 <_exit>:
  84:	f8 94       	cli

00000086 <__stop_program>:
  86:	ff cf       	rjmp	.-2      	; 0x86 <__stop_program>

Disassembly of section .text:

00000650 <__bad_interrupt>:
 650:	d7 cc       	rjmp	.-1618   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_13:

000005ac <__vector_13>:
		  _delay_ms(2);
	 }
 }*/
 //------------функция-обработчик таймера-------------
 ISR (TIMER0_COMPA_vect)//	TIMER0_COMPA_vect   
 {
 5ac:	1f 92       	push	r1
 5ae:	0f 92       	push	r0
 5b0:	0f b6       	in	r0, 0x3f	; 63
 5b2:	0f 92       	push	r0
 5b4:	11 24       	eor	r1, r1
 5b6:	8f 93       	push	r24
time_tim++;
 5b8:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <time_tim>
 5bc:	8f 5f       	subi	r24, 0xFF	; 255
 5be:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <time_tim>
	 TIMSK = 0b00000000;
 5c2:	19 be       	out	0x39, r1	; 57
	 TCCR0B = 0b00000000;//останавливаем таймер
 5c4:	13 be       	out	0x33, r1	; 51
 }
 5c6:	8f 91       	pop	r24
 5c8:	0f 90       	pop	r0
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	0f 90       	pop	r0
 5ce:	1f 90       	pop	r1
 5d0:	18 95       	reti

Disassembly of section .text.fraim_out:

00000088 <fraim_out>:
	TCCR0B |= (1<<CS02) | (1<<CS00) ;//устанавливаем делитель 1024	
	TCNT0 = 0b00000000;//обнуляем таймер 
	//TIMSK = 0b00000001;//|= (1<<OCIE0A);//устанавливаем бит разрешения прерывания счетчика по совпадению
	//TIMSK0 =0b00000000;//&= ~0x01;
	TCNT0 = 0b00000000;// установка начального значения таймера 11101000
	OCR0A = 0b00010110;//записываем в регистр число для сравнения	00110010
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <time_tim>
  90:	88 32       	cpi	r24, 0x28	; 40
  92:	39 f4       	brne	.+14     	; 0xa2 <fraim_out+0x1a>
  94:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <start_run_fraim>
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <start_tim>
  9e:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <time_tim>
  a2:	30 91 60 00 	lds	r19, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a6:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <ttt>
  aa:	4a e0       	ldi	r20, 0x0A	; 10
  ac:	83 2f       	mov	r24, r19
  ae:	64 2f       	mov	r22, r20
  b0:	b6 d2       	rcall	.+1388   	; 0x61e <__udivmodqi4>
  b2:	29 2f       	mov	r18, r25
  b4:	83 2f       	mov	r24, r19
  b6:	64 e6       	ldi	r22, 0x64	; 100
  b8:	b2 d2       	rcall	.+1380   	; 0x61e <__udivmodqi4>
  ba:	89 2f       	mov	r24, r25
  bc:	64 2f       	mov	r22, r20
  be:	af d2       	rcall	.+1374   	; 0x61e <__udivmodqi4>
  c0:	e8 2f       	mov	r30, r24
  c2:	83 2f       	mov	r24, r19
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	68 ee       	ldi	r22, 0xE8	; 232
  c8:	73 e0       	ldi	r23, 0x03	; 3
  ca:	96 d2       	rcall	.+1324   	; 0x5f8 <__divmodhi4>
  cc:	64 e6       	ldi	r22, 0x64	; 100
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	93 d2       	rcall	.+1318   	; 0x5f8 <__divmodhi4>
  d2:	a2 2f       	mov	r26, r18
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	aa 0f       	add	r26, r26
  d8:	bb 1f       	adc	r27, r27
  da:	ad 57       	subi	r26, 0x7D	; 125
  dc:	bf 4f       	sbci	r27, 0xFF	; 255
  de:	ac 91       	ld	r26, X
  e0:	a0 93 65 00 	sts	0x0065, r26	; 0x800065 <aa>
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	ed 57       	subi	r30, 0x7D	; 125
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	b0 81       	ld	r27, Z
  f0:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <bb>
  f4:	61 11       	cpse	r22, r1
  f6:	05 c0       	rjmp	.+10     	; 0x102 <__stack+0x23>
  f8:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <eff1>
  fc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <cc>
 100:	09 c0       	rjmp	.+18     	; 0x114 <__stack+0x35>
 102:	fb 01       	movw	r30, r22
 104:	ff 27       	eor	r31, r31
 106:	ee 0f       	add	r30, r30
 108:	ff 1f       	adc	r31, r31
 10a:	ed 57       	subi	r30, 0x7D	; 125
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	80 81       	ld	r24, Z
 110:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <cc>
 114:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <start_run_fraim>
 118:	8f 5f       	subi	r24, 0xFF	; 255
 11a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <start_run_fraim>
 11e:	85 31       	cpi	r24, 0x15	; 21
 120:	08 f0       	brcs	.+2      	; 0x124 <__stack+0x45>
 122:	54 c0       	rjmp	.+168    	; 0x1cc <__stack+0xed>
 124:	60 91 9d 00 	lds	r22, 0x009D	; 0x80009d <eff1+0x2>
 128:	70 91 9e 00 	lds	r23, 0x009E	; 0x80009e <eff1+0x3>
 12c:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <start_tim>
 130:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <start_izm>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	17 c0       	rjmp	.+46     	; 0x168 <__stack+0x89>
 13a:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <vpo>
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <vpo>
 144:	9c 01       	movw	r18, r24
 146:	2f 5f       	subi	r18, 0xFF	; 255
 148:	3f 4f       	sbci	r19, 0xFF	; 255
 14a:	f9 01       	movw	r30, r18
 14c:	ee 0f       	add	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	e5 56       	subi	r30, 0x65	; 101
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	40 81       	ld	r20, Z
 156:	51 81       	ldd	r21, Z+1	; 0x01
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	fc 01       	movw	r30, r24
 15e:	e5 56       	subi	r30, 0x65	; 101
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	51 83       	std	Z+1, r21	; 0x01
 164:	40 83       	st	Z, r20
 166:	c9 01       	movw	r24, r18
 168:	8b 30       	cpi	r24, 0x0B	; 11
 16a:	91 05       	cpc	r25, r1
 16c:	34 f3       	brlt	.-52     	; 0x13a <__stack+0x5b>
 16e:	70 93 ae 00 	sts	0x00AE, r23	; 0x8000ae <__heap_start+0x1>
 172:	60 93 ad 00 	sts	0x00AD, r22	; 0x8000ad <__heap_start>
 176:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <vpo>
 17a:	88 32       	cpi	r24, 0x28	; 40
 17c:	09 f4       	brne	.+2      	; 0x180 <__stack+0xa1>
 17e:	63 c0       	rjmp	.+198    	; 0x246 <__stack+0x167>
 180:	40 f4       	brcc	.+16     	; 0x192 <__stack+0xb3>
 182:	84 31       	cpi	r24, 0x14	; 20
 184:	31 f1       	breq	.+76     	; 0x1d2 <__stack+0xf3>
 186:	8e 31       	cpi	r24, 0x1E	; 30
 188:	09 f4       	brne	.+2      	; 0x18c <__stack+0xad>
 18a:	40 c0       	rjmp	.+128    	; 0x20c <__stack+0x12d>
 18c:	8a 30       	cpi	r24, 0x0A	; 10
 18e:	f1 f4       	brne	.+60     	; 0x1cc <__stack+0xed>
 190:	09 c0       	rjmp	.+18     	; 0x1a4 <__stack+0xc5>
 192:	8c 33       	cpi	r24, 0x3C	; 60
 194:	09 f4       	brne	.+2      	; 0x198 <__stack+0xb9>
 196:	92 c0       	rjmp	.+292    	; 0x2bc <__stack+0x1dd>
 198:	8e 36       	cpi	r24, 0x6E	; 110
 19a:	09 f4       	brne	.+2      	; 0x19e <__stack+0xbf>
 19c:	a2 c0       	rjmp	.+324    	; 0x2e2 <__stack+0x203>
 19e:	82 33       	cpi	r24, 0x32	; 50
 1a0:	a9 f4       	brne	.+42     	; 0x1cc <__stack+0xed>
 1a2:	6f c0       	rjmp	.+222    	; 0x282 <__stack+0x1a3>
 1a4:	eb e9       	ldi	r30, 0x9B	; 155
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	13 82       	std	Z+3, r1	; 0x03
 1aa:	12 82       	std	Z+2, r1	; 0x02
 1ac:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <cc>
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	95 83       	std	Z+5, r25	; 0x05
 1b4:	84 83       	std	Z+4, r24	; 0x04
 1b6:	8b 2f       	mov	r24, r27
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	97 83       	std	Z+7, r25	; 0x07
 1bc:	86 83       	std	Z+6, r24	; 0x06
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	b1 87       	std	Z+9, r27	; 0x09
 1c2:	a0 87       	std	Z+8, r26	; 0x08
 1c4:	8e e4       	ldi	r24, 0x4E	; 78
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	93 87       	std	Z+11, r25	; 0x0b
 1ca:	82 87       	std	Z+10, r24	; 0x0a
 1cc:	c0 e0       	ldi	r28, 0x00	; 0
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
 1d0:	24 c1       	rjmp	.+584    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 1d2:	eb e9       	ldi	r30, 0x9B	; 155
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <cc>
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	93 83       	std	Z+3, r25	; 0x03
 1de:	82 83       	std	Z+2, r24	; 0x02
 1e0:	8b 2f       	mov	r24, r27
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	95 83       	std	Z+5, r25	; 0x05
 1e6:	84 83       	std	Z+4, r24	; 0x04
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	b7 83       	std	Z+7, r27	; 0x07
 1ec:	a6 83       	std	Z+6, r26	; 0x06
 1ee:	8e e4       	ldi	r24, 0x4E	; 78
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	91 87       	std	Z+9, r25	; 0x09
 1f4:	80 87       	std	Z+8, r24	; 0x08
 1f6:	13 86       	std	Z+11, r1	; 0x0b
 1f8:	12 86       	std	Z+10, r1	; 0x0a
 1fa:	15 86       	std	Z+13, r1	; 0x0d
 1fc:	14 86       	std	Z+12, r1	; 0x0c
 1fe:	17 86       	std	Z+15, r1	; 0x0f
 200:	16 86       	std	Z+14, r1	; 0x0e
 202:	11 8a       	std	Z+17, r1	; 0x11
 204:	10 8a       	std	Z+16, r1	; 0x10
 206:	13 8a       	std	Z+19, r1	; 0x13
 208:	12 8a       	std	Z+18, r1	; 0x12
 20a:	e0 cf       	rjmp	.-64     	; 0x1cc <__stack+0xed>
 20c:	eb e9       	ldi	r30, 0x9B	; 155
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	8b 2f       	mov	r24, r27
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	93 83       	std	Z+3, r25	; 0x03
 216:	82 83       	std	Z+2, r24	; 0x02
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	b5 83       	std	Z+5, r27	; 0x05
 21c:	a4 83       	std	Z+4, r26	; 0x04
 21e:	8e e4       	ldi	r24, 0x4E	; 78
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	97 83       	std	Z+7, r25	; 0x07
 224:	86 83       	std	Z+6, r24	; 0x06
 226:	11 86       	std	Z+9, r1	; 0x09
 228:	10 86       	std	Z+8, r1	; 0x08
 22a:	13 86       	std	Z+11, r1	; 0x0b
 22c:	12 86       	std	Z+10, r1	; 0x0a
 22e:	15 86       	std	Z+13, r1	; 0x0d
 230:	14 86       	std	Z+12, r1	; 0x0c
 232:	17 86       	std	Z+15, r1	; 0x0f
 234:	16 86       	std	Z+14, r1	; 0x0e
 236:	11 8a       	std	Z+17, r1	; 0x11
 238:	10 8a       	std	Z+16, r1	; 0x10
 23a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <cc>
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	93 8b       	std	Z+19, r25	; 0x13
 242:	82 8b       	std	Z+18, r24	; 0x12
 244:	c3 cf       	rjmp	.-122    	; 0x1cc <__stack+0xed>
 246:	eb e9       	ldi	r30, 0x9B	; 155
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	8a 2f       	mov	r24, r26
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	93 83       	std	Z+3, r25	; 0x03
 250:	82 83       	std	Z+2, r24	; 0x02
 252:	8e e4       	ldi	r24, 0x4E	; 78
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	95 83       	std	Z+5, r25	; 0x05
 258:	84 83       	std	Z+4, r24	; 0x04
 25a:	17 82       	std	Z+7, r1	; 0x07
 25c:	16 82       	std	Z+6, r1	; 0x06
 25e:	11 86       	std	Z+9, r1	; 0x09
 260:	10 86       	std	Z+8, r1	; 0x08
 262:	13 86       	std	Z+11, r1	; 0x0b
 264:	12 86       	std	Z+10, r1	; 0x0a
 266:	15 86       	std	Z+13, r1	; 0x0d
 268:	14 86       	std	Z+12, r1	; 0x0c
 26a:	17 86       	std	Z+15, r1	; 0x0f
 26c:	16 86       	std	Z+14, r1	; 0x0e
 26e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <cc>
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	91 8b       	std	Z+17, r25	; 0x11
 276:	80 8b       	std	Z+16, r24	; 0x10
 278:	8b 2f       	mov	r24, r27
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	93 8b       	std	Z+19, r25	; 0x13
 27e:	82 8b       	std	Z+18, r24	; 0x12
 280:	a5 cf       	rjmp	.-182    	; 0x1cc <__stack+0xed>
 282:	eb e9       	ldi	r30, 0x9B	; 155
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	8e e4       	ldi	r24, 0x4E	; 78
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	93 83       	std	Z+3, r25	; 0x03
 28c:	82 83       	std	Z+2, r24	; 0x02
 28e:	15 82       	std	Z+5, r1	; 0x05
 290:	14 82       	std	Z+4, r1	; 0x04
 292:	17 82       	std	Z+7, r1	; 0x07
 294:	16 82       	std	Z+6, r1	; 0x06
 296:	11 86       	std	Z+9, r1	; 0x09
 298:	10 86       	std	Z+8, r1	; 0x08
 29a:	13 86       	std	Z+11, r1	; 0x0b
 29c:	12 86       	std	Z+10, r1	; 0x0a
 29e:	15 86       	std	Z+13, r1	; 0x0d
 2a0:	14 86       	std	Z+12, r1	; 0x0c
 2a2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <cc>
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	97 87       	std	Z+15, r25	; 0x0f
 2aa:	86 87       	std	Z+14, r24	; 0x0e
 2ac:	8b 2f       	mov	r24, r27
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	91 8b       	std	Z+17, r25	; 0x11
 2b2:	80 8b       	std	Z+16, r24	; 0x10
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	b3 8b       	std	Z+19, r27	; 0x13
 2b8:	a2 8b       	std	Z+18, r26	; 0x12
 2ba:	88 cf       	rjmp	.-240    	; 0x1cc <__stack+0xed>
 2bc:	20 d1       	rcall	.+576    	; 0x4fe <dt_check>
 2be:	c5 d1       	rcall	.+906    	; 0x64a <converttemp>
 2c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c4:	eb e9       	ldi	r30, 0x9B	; 155
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	13 82       	std	Z+3, r1	; 0x03
 2ca:	12 82       	std	Z+2, r1	; 0x02
 2cc:	15 82       	std	Z+5, r1	; 0x05
 2ce:	14 82       	std	Z+4, r1	; 0x04
 2d0:	17 82       	std	Z+7, r1	; 0x07
 2d2:	16 82       	std	Z+6, r1	; 0x06
 2d4:	11 86       	std	Z+9, r1	; 0x09
 2d6:	10 86       	std	Z+8, r1	; 0x08
 2d8:	13 86       	std	Z+11, r1	; 0x0b
 2da:	12 86       	std	Z+10, r1	; 0x0a
 2dc:	15 86       	std	Z+13, r1	; 0x0d
 2de:	14 86       	std	Z+12, r1	; 0x0c
 2e0:	75 cf       	rjmp	.-278    	; 0x1cc <__stack+0xed>
 2e2:	eb e9       	ldi	r30, 0x9B	; 155
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	13 82       	std	Z+3, r1	; 0x03
 2e8:	12 82       	std	Z+2, r1	; 0x02
 2ea:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <cc>
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	95 83       	std	Z+5, r25	; 0x05
 2f2:	84 83       	std	Z+4, r24	; 0x04
 2f4:	8b 2f       	mov	r24, r27
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	97 83       	std	Z+7, r25	; 0x07
 2fa:	86 83       	std	Z+6, r24	; 0x06
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	b1 87       	std	Z+9, r27	; 0x09
 300:	a0 87       	std	Z+8, r26	; 0x08
 302:	8e e4       	ldi	r24, 0x4E	; 78
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	93 87       	std	Z+11, r25	; 0x0b
 308:	82 87       	std	Z+10, r24	; 0x0a
 30a:	8a e0       	ldi	r24, 0x0A	; 10
 30c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <vpo>
 310:	5d cf       	rjmp	.-326    	; 0x1cc <__stack+0xed>
 312:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <l>
 316:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <l+0x1>
 31a:	ee 0f       	add	r30, r30
 31c:	ff 1f       	adc	r31, r31
 31e:	e5 56       	subi	r30, 0x65	; 101
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	80 81       	ld	r24, Z
 324:	88 bb       	out	0x18, r24	; 24
 326:	8f ec       	ldi	r24, 0xCF	; 207
 328:	97 e0       	ldi	r25, 0x07	; 7
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <__stack+0x24b>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <__stack+0x251>
 330:	00 00       	nop
 332:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <l>
 336:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <l+0x1>
 33a:	82 30       	cpi	r24, 0x02	; 2
 33c:	91 05       	cpc	r25, r1
 33e:	c1 f0       	breq	.+48     	; 0x370 <__stack+0x291>
 340:	2c f4       	brge	.+10     	; 0x34c <__stack+0x26d>
 342:	00 97       	sbiw	r24, 0x00	; 0
 344:	51 f0       	breq	.+20     	; 0x35a <__stack+0x27b>
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	61 f0       	breq	.+24     	; 0x362 <__stack+0x283>
 34a:	2a c0       	rjmp	.+84     	; 0x3a0 <__stack+0x2c1>
 34c:	84 30       	cpi	r24, 0x04	; 4
 34e:	91 05       	cpc	r25, r1
 350:	e9 f0       	breq	.+58     	; 0x38c <__stack+0x2ad>
 352:	ac f0       	brlt	.+42     	; 0x37e <__stack+0x29f>
 354:	05 97       	sbiw	r24, 0x05	; 5
 356:	09 f1       	breq	.+66     	; 0x39a <__stack+0x2bb>
 358:	23 c0       	rjmp	.+70     	; 0x3a0 <__stack+0x2c1>
 35a:	82 b3       	in	r24, 0x12	; 18
 35c:	8f 60       	ori	r24, 0x0F	; 15
 35e:	82 bb       	out	0x12, r24	; 18
 360:	1f c0       	rjmp	.+62     	; 0x3a0 <__stack+0x2c1>
 362:	82 b3       	in	r24, 0x12	; 18
 364:	8f 60       	ori	r24, 0x0F	; 15
 366:	82 bb       	out	0x12, r24	; 18
 368:	82 b3       	in	r24, 0x12	; 18
 36a:	8b 7f       	andi	r24, 0xFB	; 251
 36c:	82 bb       	out	0x12, r24	; 18
 36e:	18 c0       	rjmp	.+48     	; 0x3a0 <__stack+0x2c1>
 370:	82 b3       	in	r24, 0x12	; 18
 372:	8f 60       	ori	r24, 0x0F	; 15
 374:	82 bb       	out	0x12, r24	; 18
 376:	82 b3       	in	r24, 0x12	; 18
 378:	8d 7f       	andi	r24, 0xFD	; 253
 37a:	82 bb       	out	0x12, r24	; 18
 37c:	11 c0       	rjmp	.+34     	; 0x3a0 <__stack+0x2c1>
 37e:	82 b3       	in	r24, 0x12	; 18
 380:	8f 60       	ori	r24, 0x0F	; 15
 382:	82 bb       	out	0x12, r24	; 18
 384:	82 b3       	in	r24, 0x12	; 18
 386:	8e 7f       	andi	r24, 0xFE	; 254
 388:	82 bb       	out	0x12, r24	; 18
 38a:	0a c0       	rjmp	.+20     	; 0x3a0 <__stack+0x2c1>
 38c:	82 b3       	in	r24, 0x12	; 18
 38e:	8f 60       	ori	r24, 0x0F	; 15
 390:	82 bb       	out	0x12, r24	; 18
 392:	82 b3       	in	r24, 0x12	; 18
 394:	87 7f       	andi	r24, 0xF7	; 247
 396:	82 bb       	out	0x12, r24	; 18
 398:	03 c0       	rjmp	.+6      	; 0x3a0 <__stack+0x2c1>
 39a:	82 b3       	in	r24, 0x12	; 18
 39c:	8f 60       	ori	r24, 0x0F	; 15
 39e:	82 bb       	out	0x12, r24	; 18
 3a0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <l>
 3a4:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <l+0x1>
 3a8:	2f 5f       	subi	r18, 0xFF	; 255
 3aa:	3f 4f       	sbci	r19, 0xFF	; 255
 3ac:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <l+0x1>
 3b0:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <l>
 3b4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <y>
 3b8:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <y+0x1>
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <y+0x1>
 3c2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <y>
 3c6:	09 97       	sbiw	r24, 0x09	; 9
 3c8:	39 f5       	brne	.+78     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3ca:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <y+0x1>
 3ce:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <y>
 3d2:	29 50       	subi	r18, 0x09	; 9
 3d4:	31 09       	sbc	r19, r1
 3d6:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <l+0x1>
 3da:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <l>
 3de:	8f d0       	rcall	.+286    	; 0x4fe <dt_check>
 3e0:	34 d1       	rcall	.+616    	; 0x64a <converttemp>
 3e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 3e6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <start_run_fraim>
 3ea:	84 31       	cpi	r24, 0x14	; 20
 3ec:	a8 f0       	brcs	.+42     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3ee:	eb e9       	ldi	r30, 0x9B	; 155
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <cc>
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	95 83       	std	Z+5, r25	; 0x05
 3fa:	84 83       	std	Z+4, r24	; 0x04
 3fc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <bb>
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	97 83       	std	Z+7, r25	; 0x07
 404:	86 83       	std	Z+6, r24	; 0x06
 406:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <aa>
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	91 87       	std	Z+9, r25	; 0x09
 40e:	80 87       	std	Z+8, r24	; 0x08
 410:	8e e4       	ldi	r24, 0x4E	; 78
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	93 87       	std	Z+11, r25	; 0x0b
 416:	82 87       	std	Z+10, r24	; 0x0a
 418:	21 96       	adiw	r28, 0x01	; 1
 41a:	ce 35       	cpi	r28, 0x5E	; 94
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	d9 07       	cpc	r29, r25
 420:	0c f4       	brge	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	77 cf       	rjmp	.-274    	; 0x312 <__stack+0x233>
 424:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <start_tim>
 428:	81 11       	cpse	r24, r1
 42a:	07 c0       	rjmp	.+14     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 42c:	89 b7       	in	r24, 0x39	; 57
 42e:	81 60       	ori	r24, 0x01	; 1
 430:	89 bf       	out	0x39, r24	; 57
 432:	83 b7       	in	r24, 0x33	; 51
 434:	85 60       	ori	r24, 0x05	; 5
 436:	83 bf       	out	0x33, r24	; 51
 438:	12 be       	out	0x32, r1	; 50
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

Disassembly of section .text.main:

00000636 <main>:
}
}
//-----------------------------------------------------
int main(void)
{
    sei();//разрешаем глобальные прерывания
 636:	78 94       	sei
	DDRB = 0b11111111;// определяем выходы мк (1 выход; 0 вход); 
 638:	8f ef       	ldi	r24, 0xFF	; 255
 63a:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b01001111;// определяем выходы мк (1 выход; 0 вход);
 63c:	8f e4       	ldi	r24, 0x4F	; 79
 63e:	81 bb       	out	0x11, r24	; 17
    while(1)
    {	
		fraim_out(t);
 640:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	20 dd       	rcall	.-1472   	; 0x88 <__data_load_end>
 648:	fb cf       	rjmp	.-10     	; 0x640 <main+0xa>

Disassembly of section .text.dt_testdevice:

00000440 <dt_testdevice>:
char dt_testdevice(void) //dt - digital termomether | определим, есть ли устройство на шине
{

		//char stektemp=SREG;// сохраним значение стека
		//cli(); //запрещаем прерывание
	DDRTEMP |= 1<<BITTEMP;  //притягиваем шину  |= 0x20; 
 440:	81 b3       	in	r24, 0x11	; 17
 442:	80 62       	ori	r24, 0x20	; 32
 444:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 446:	87 ee       	ldi	r24, 0xE7	; 231
 448:	93 e0       	ldi	r25, 0x03	; 3
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <dt_testdevice+0xa>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <dt_testdevice+0x10>
 450:	00 00       	nop
	_delay_us(500); //задержка как минимум на 480 микросекунд
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину  &= ~0x20;
 452:	81 b3       	in	r24, 0x11	; 17
 454:	8f 7d       	andi	r24, 0xDF	; 223
 456:	81 bb       	out	0x11, r24	; 17
 458:	9d ea       	ldi	r25, 0xAD	; 173
 45a:	9a 95       	dec	r25
 45c:	f1 f7       	brne	.-4      	; 0x45a <dt_testdevice+0x1a>
 45e:	00 00       	nop
	_delay_us(65); //задержка как минимум на 60 микросекунд
	if ((PINTEMP & (1<<BITTEMP))==0)//проверяем, ответит ли устройство
 460:	85 99       	sbic	0x10, 5	; 16
 462:	04 c0       	rjmp	.+8      	; 0x46c <dt_testdevice+0x2c>
	{
		dt=1;//устройство есть
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <dt>
 46a:	02 c0       	rjmp	.+4      	; 0x470 <dt_testdevice+0x30>
	}
	else {
		dt=0;//устройства нет
 46c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <dt>
 470:	87 ee       	ldi	r24, 0xE7	; 231
 472:	93 e0       	ldi	r25, 0x03	; 3
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <dt_testdevice+0x34>
 478:	00 c0       	rjmp	.+0      	; 0x47a <dt_testdevice+0x3a>
 47a:	00 00       	nop
	}
	//SREG = stektemp;// вернем значение стека
	_delay_us(500); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
	return dt; //вернем результат
}
 47c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <dt>
 480:	08 95       	ret

Disassembly of section .text.dt_sendbit:

0000055c <dt_sendbit>:
//========================================
void dt_sendbit(char bt)//функция записи бита на устройство
{
		//char stektemp=SREG;// сохраним значение стека
		//cli(); //запрещаем прерывание
DDRTEMP |= 1<<BITTEMP;  //притягиваем шину
 55c:	91 b3       	in	r25, 0x11	; 17
 55e:	90 62       	ori	r25, 0x20	; 32
 560:	91 bb       	out	0x11, r25	; 17
 562:	95 e0       	ldi	r25, 0x05	; 5
 564:	9a 95       	dec	r25
 566:	f1 f7       	brne	.-4      	; 0x564 <dt_sendbit+0x8>
 568:	00 00       	nop
_delay_us(2); //задержка как минимум на 2 микросекунд
if(bt)
 56a:	88 23       	and	r24, r24
 56c:	19 f0       	breq	.+6      	; 0x574 <dt_sendbit+0x18>
DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
 56e:	81 b3       	in	r24, 0x11	; 17
 570:	8f 7d       	andi	r24, 0xDF	; 223
 572:	81 bb       	out	0x11, r24	; 17
 574:	8d ea       	ldi	r24, 0xAD	; 173
 576:	8a 95       	dec	r24
 578:	f1 f7       	brne	.-4      	; 0x576 <dt_sendbit+0x1a>
 57a:	00 00       	nop
_delay_us(65); //задержка как минимум на 65 микросекунд
DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
 57c:	81 b3       	in	r24, 0x11	; 17
 57e:	8f 7d       	andi	r24, 0xDF	; 223
 580:	81 bb       	out	0x11, r24	; 17
 582:	08 95       	ret

Disassembly of section .text.dt_sendbyte:

00000482 <dt_sendbyte>:
//SREG = stektemp;// вернем значение стека
}
//========================================
void dt_sendbyte(unsigned char bt)//функция записи байта на устройство
{
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	d8 2f       	mov	r29, r24
char i;
for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
 488:	c0 e0       	ldi	r28, 0x00	; 0
 48a:	15 c0       	rjmp	.+42     	; 0x4b6 <dt_sendbyte+0x34>
{
	if((bt & (1<<i)) == 1<<i)//посылаем 1
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0c 2e       	mov	r0, r28
 492:	02 c0       	rjmp	.+4      	; 0x498 <dt_sendbyte+0x16>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	0a 94       	dec	r0
 49a:	e2 f7       	brpl	.-8      	; 0x494 <dt_sendbyte+0x12>
 49c:	2d 2f       	mov	r18, r29
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	28 23       	and	r18, r24
 4a2:	39 23       	and	r19, r25
 4a4:	82 17       	cp	r24, r18
 4a6:	93 07       	cpc	r25, r19
 4a8:	19 f4       	brne	.+6      	; 0x4b0 <dt_sendbyte+0x2e>
	dt_sendbit(1);
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	57 d0       	rcall	.+174    	; 0x55c <dt_sendbit>
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <dt_sendbyte+0x32>
	else //посылаем 0
	dt_sendbit(0);
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	54 d0       	rcall	.+168    	; 0x55c <dt_sendbit>
}
//========================================
void dt_sendbyte(unsigned char bt)//функция записи байта на устройство
{
char i;
for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
 4b4:	cf 5f       	subi	r28, 0xFF	; 255
 4b6:	c8 30       	cpi	r28, 0x08	; 8
 4b8:	48 f3       	brcs	.-46     	; 0x48c <dt_sendbyte+0xa>
	if((bt & (1<<i)) == 1<<i)//посылаем 1
	dt_sendbit(1);
	else //посылаем 0
	dt_sendbit(0);
}	
}
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

Disassembly of section .text.ds18x2_sel:

000005d2 <ds18x2_sel>:
	//int identifi [8] = {0b00010000,0b00001110,0b10111110,0b00010110,0b00000010,0b00001000,0b00000000,0b00010110};
	
//====================================
void ds18x2_sel(void){

dt_sendbyte(MATCH_ROM);
 5d2:	85 e5       	ldi	r24, 0x55	; 85
 5d4:	56 df       	rcall	.-340    	; 0x482 <dt_sendbyte>
		dt_sendbyte(0x16);
		dt_sendbyte(0xBE);
		dt_sendbyte(0x0E);
		dt_sendbyte(0x16);*/
		
		dt_sendbyte(0x8);
 5d6:	88 e0       	ldi	r24, 0x08	; 8
 5d8:	54 df       	rcall	.-344    	; 0x482 <dt_sendbyte>
		dt_sendbyte(0x0);
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	52 df       	rcall	.-348    	; 0x482 <dt_sendbyte>
		dt_sendbyte(0x10);
 5de:	80 e1       	ldi	r24, 0x10	; 16
 5e0:	50 df       	rcall	.-352    	; 0x482 <dt_sendbyte>
		dt_sendbyte(0x40);
 5e2:	80 e4       	ldi	r24, 0x40	; 64
 5e4:	4e df       	rcall	.-356    	; 0x482 <dt_sendbyte>
		dt_sendbyte(0x68);
 5e6:	88 e6       	ldi	r24, 0x68	; 104
 5e8:	4c df       	rcall	.-360    	; 0x482 <dt_sendbyte>
		dt_sendbyte(0x7D);
 5ea:	8d e7       	ldi	r24, 0x7D	; 125
 5ec:	4a df       	rcall	.-364    	; 0x482 <dt_sendbyte>
		dt_sendbyte(0x70);
 5ee:	80 e7       	ldi	r24, 0x70	; 112
 5f0:	48 df       	rcall	.-368    	; 0x482 <dt_sendbyte>
		dt_sendbyte(0x60);
 5f2:	80 e6       	ldi	r24, 0x60	; 96
 5f4:	46 df       	rcall	.-372    	; 0x482 <dt_sendbyte>
 5f6:	08 95       	ret

Disassembly of section .text.dt_readbit:

000004c0 <dt_readbit>:
char dt_readbit(void)//функция чтения бита с устройства
{
//char stektemp=SREG;// сохраним значение стека
//cli(); //запрещаем прерывание
char bt; //переменная хранения бита
DDRTEMP |= 1<<BITTEMP; //притягиваем шину
 4c0:	81 b3       	in	r24, 0x11	; 17
 4c2:	80 62       	ori	r24, 0x20	; 32
 4c4:	81 bb       	out	0x11, r24	; 17
 4c6:	25 e0       	ldi	r18, 0x05	; 5
 4c8:	2a 95       	dec	r18
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <dt_readbit+0x8>
 4cc:	00 00       	nop
_delay_us(2); //задержка как минимум на 2 микросекунды
DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
 4ce:	81 b3       	in	r24, 0x11	; 17
 4d0:	8f 7d       	andi	r24, 0xDF	; 223
 4d2:	81 bb       	out	0x11, r24	; 17
 4d4:	82 e2       	ldi	r24, 0x22	; 34
 4d6:	8a 95       	dec	r24
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <dt_readbit+0x16>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <dt_readbit+0x1c>
_delay_us(13);
bt = (PINTEMP & (1<<BITTEMP))>>BITTEMP; //читаем бит
 4dc:	80 b3       	in	r24, 0x10	; 16
 4de:	80 72       	andi	r24, 0x20	; 32
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	95 95       	asr	r25
 4e4:	87 95       	ror	r24
 4e6:	95 95       	asr	r25
 4e8:	87 95       	ror	r24
 4ea:	95 95       	asr	r25
 4ec:	87 95       	ror	r24
 4ee:	95 95       	asr	r25
 4f0:	87 95       	ror	r24
 4f2:	95 95       	asr	r25
 4f4:	87 95       	ror	r24
 4f6:	28 e7       	ldi	r18, 0x78	; 120
 4f8:	2a 95       	dec	r18
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <dt_readbit+0x38>
_delay_us(45);
//SREG = stektemp;// вернем значение стека
return bt; //вернем результат	
}
 4fc:	08 95       	ret

Disassembly of section .text.dt_readbyte:

00000532 <dt_readbyte>:
//========================================
unsigned char dt_readbyte(void)//функция чтения байта с устройства
{
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
	char c=0;
	char i;
	for(i=0;i<8;i++)
 536:	c0 e0       	ldi	r28, 0x00	; 0
return bt; //вернем результат	
}
//========================================
unsigned char dt_readbyte(void)//функция чтения байта с устройства
{
	char c=0;
 538:	d0 e0       	ldi	r29, 0x00	; 0
	char i;
	for(i=0;i<8;i++)
 53a:	0a c0       	rjmp	.+20     	; 0x550 <dt_readbyte+0x1e>
	c|=dt_readbit()<<i; //читаем бит
 53c:	c1 df       	rcall	.-126    	; 0x4c0 <dt_readbit>
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0c 2e       	mov	r0, r28
 542:	02 c0       	rjmp	.+4      	; 0x548 <dt_readbyte+0x16>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	0a 94       	dec	r0
 54a:	e2 f7       	brpl	.-8      	; 0x544 <dt_readbyte+0x12>
 54c:	d8 2b       	or	r29, r24
//========================================
unsigned char dt_readbyte(void)//функция чтения байта с устройства
{
	char c=0;
	char i;
	for(i=0;i<8;i++)
 54e:	cf 5f       	subi	r28, 0xFF	; 255
 550:	c8 30       	cpi	r28, 0x08	; 8
 552:	a0 f3       	brcs	.-24     	; 0x53c <dt_readbyte+0xa>
	c|=dt_readbit()<<i; //читаем бит
	return c;
}
 554:	8d 2f       	mov	r24, r29
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

Disassembly of section .text.dt_check:

000004fe <dt_check>:
//========================================
int dt_check(void)//функция преобразования показаний датчика в температуру
{
 4fe:	cf 93       	push	r28
	
	unsigned char bt;//переменная для считывания байта
	unsigned int tt=0;
	if(dt_testdevice()==1) //если устройство нашлось
 500:	9f df       	rcall	.-194    	; 0x440 <dt_testdevice>
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	91 f4       	brne	.+36     	; 0x52a <dt_check+0x2c>
	{
ds18x2_sel();
 506:	65 d0       	rcall	.+202    	; 0x5d2 <ds18x2_sel>


		
		//dt_sendbyte(NOID);
		dt_sendbyte(T_CONVERT);//44 измеряем температуру
 508:	84 e4       	ldi	r24, 0x44	; 68
 50a:	bb df       	rcall	.-138    	; 0x482 <dt_sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50c:	8f ec       	ldi	r24, 0xCF	; 207
 50e:	97 e0       	ldi	r25, 0x07	; 7
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	f1 f7       	brne	.-4      	; 0x510 <dt_check+0x12>
 514:	00 c0       	rjmp	.+0      	; 0x516 <dt_check+0x18>
 516:	00 00       	nop
		_delay_ms(1);//в 12битном режиме преобразования - 750 милисекунд
		dt_testdevice();//снова используем  те же манипуляции с шиной что и при проверке ее присутствия
 518:	93 df       	rcall	.-218    	; 0x440 <dt_testdevice>
		//dt_sendbyte(NOID);//CC пропустить идентификацию, тк у нас только одно устройство на шине
		//ds18x2_sel();
		dt_sendbyte(READ_DATA); //даем команду на чтение данных с устройства
 51a:	8e eb       	ldi	r24, 0xBE	; 190
 51c:	b2 df       	rcall	.-156    	; 0x482 <dt_sendbyte>

		
		bt = dt_readbyte(); //читаем младший бит
 51e:	09 d0       	rcall	.+18     	; 0x532 <dt_readbyte>
 520:	c8 2f       	mov	r28, r24
		tt = dt_readbyte(); //читаем старший бит MS
 522:	07 d0       	rcall	.+14     	; 0x532 <dt_readbyte>

		tt = bt;//(tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
 524:	8c 2f       	mov	r24, r28
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <dt_check+0x30>
//========================================
int dt_check(void)//функция преобразования показаний датчика в температуру
{
	
	unsigned char bt;//переменная для считывания байта
	unsigned int tt=0;
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	90 e0       	ldi	r25, 0x00	; 0
		tt = dt_readbyte(); //читаем старший бит MS

		tt = bt;//(tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
	}
	return tt;
}
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

Disassembly of section .text.converttemp:

0000064a <converttemp>:
//===========================================
char converttemp (unsigned int tt)//преобразование температуры в единицы
{
	char t = tt/2;//>>3;//сдвиг и отсечение части старшего байта
 64a:	96 95       	lsr	r25
 64c:	87 95       	ror	r24
	//char t = tt;
	return t;
 64e:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000061e <__udivmodqi4>:
 61e:	99 1b       	sub	r25, r25
 620:	79 e0       	ldi	r23, 0x09	; 9
 622:	04 c0       	rjmp	.+8      	; 0x62c <__udivmodqi4_ep>

00000624 <__udivmodqi4_loop>:
 624:	99 1f       	adc	r25, r25
 626:	96 17       	cp	r25, r22
 628:	08 f0       	brcs	.+2      	; 0x62c <__udivmodqi4_ep>
 62a:	96 1b       	sub	r25, r22

0000062c <__udivmodqi4_ep>:
 62c:	88 1f       	adc	r24, r24
 62e:	7a 95       	dec	r23
 630:	c9 f7       	brne	.-14     	; 0x624 <__udivmodqi4_loop>
 632:	80 95       	com	r24
 634:	08 95       	ret

Disassembly of section .text.libgcc.div:

000005f8 <__divmodhi4>:
 5f8:	97 fb       	bst	r25, 7
 5fa:	07 2e       	mov	r0, r23
 5fc:	16 f4       	brtc	.+4      	; 0x602 <__divmodhi4+0xa>
 5fe:	00 94       	com	r0
 600:	06 d0       	rcall	.+12     	; 0x60e <__divmodhi4_neg1>
 602:	77 fd       	sbrc	r23, 7
 604:	08 d0       	rcall	.+16     	; 0x616 <__divmodhi4_neg2>
 606:	be df       	rcall	.-132    	; 0x584 <__udivmodhi4>
 608:	07 fc       	sbrc	r0, 7
 60a:	05 d0       	rcall	.+10     	; 0x616 <__divmodhi4_neg2>
 60c:	3e f4       	brtc	.+14     	; 0x61c <__divmodhi4_exit>

0000060e <__divmodhi4_neg1>:
 60e:	90 95       	com	r25
 610:	81 95       	neg	r24
 612:	9f 4f       	sbci	r25, 0xFF	; 255
 614:	08 95       	ret

00000616 <__divmodhi4_neg2>:
 616:	70 95       	com	r23
 618:	61 95       	neg	r22
 61a:	7f 4f       	sbci	r23, 0xFF	; 255

0000061c <__divmodhi4_exit>:
 61c:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000584 <__udivmodhi4>:
 584:	aa 1b       	sub	r26, r26
 586:	bb 1b       	sub	r27, r27
 588:	51 e1       	ldi	r21, 0x11	; 17
 58a:	07 c0       	rjmp	.+14     	; 0x59a <__udivmodhi4_ep>

0000058c <__udivmodhi4_loop>:
 58c:	aa 1f       	adc	r26, r26
 58e:	bb 1f       	adc	r27, r27
 590:	a6 17       	cp	r26, r22
 592:	b7 07       	cpc	r27, r23
 594:	10 f0       	brcs	.+4      	; 0x59a <__udivmodhi4_ep>
 596:	a6 1b       	sub	r26, r22
 598:	b7 0b       	sbc	r27, r23

0000059a <__udivmodhi4_ep>:
 59a:	88 1f       	adc	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	5a 95       	dec	r21
 5a0:	a9 f7       	brne	.-22     	; 0x58c <__udivmodhi4_loop>
 5a2:	80 95       	com	r24
 5a4:	90 95       	com	r25
 5a6:	bc 01       	movw	r22, r24
 5a8:	cd 01       	movw	r24, r26
 5aa:	08 95       	ret
