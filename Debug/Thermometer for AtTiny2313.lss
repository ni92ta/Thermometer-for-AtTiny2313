
Thermometer for AtTiny2313.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000088  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000088  00000562  2**0
                  ALLOC
  2 .bss          00000029  00800060  00800060  00000864  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000893  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001291  00000000  00000000  0000091b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000764  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c1  00000000  00000000  00002310  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00002bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001aa  00000000  00000000  00002d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000064a  00000000  00000000  00002eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000034fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  00000756  00000756  0000084a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000357c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_13 00000026  000006fc  000006fc  000007f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.frame_out 000003e6  00000088  00000088  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000000e  00000748  00000748  0000083c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.result_output 00000012  008000a1  008000a1  00000864  2**0
                  ALLOC
 18 .data.efi     00000018  00800089  00000758  0000084c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .text.dt_testdevice 00000042  000005c4  000005c4  000006b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.dt_sendbit 00000028  000006ac  000006ac  000007a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.dt_sendbyte 0000003e  00000606  00000606  000006fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.ds18x2_sel 00000054  00000570  00000570  00000664  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.dt_readbit 0000003e  00000644  00000644  00000738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.dt_readbyte 0000002a  00000682  00000682  00000776  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.dt_check 00000102  0000046e  0000046e  00000562  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.libgcc.div 00000028  000006d4  000006d4  000007c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.libgcc.div 00000026  00000722  00000722  00000816  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	a9 c3       	rjmp	.+1874   	; 0x756 <__bad_interrupt>
   4:	a8 c3       	rjmp	.+1872   	; 0x756 <__bad_interrupt>
   6:	a7 c3       	rjmp	.+1870   	; 0x756 <__bad_interrupt>
   8:	a6 c3       	rjmp	.+1868   	; 0x756 <__bad_interrupt>
   a:	a5 c3       	rjmp	.+1866   	; 0x756 <__bad_interrupt>
   c:	a4 c3       	rjmp	.+1864   	; 0x756 <__bad_interrupt>
   e:	a3 c3       	rjmp	.+1862   	; 0x756 <__bad_interrupt>
  10:	a2 c3       	rjmp	.+1860   	; 0x756 <__bad_interrupt>
  12:	a1 c3       	rjmp	.+1858   	; 0x756 <__bad_interrupt>
  14:	a0 c3       	rjmp	.+1856   	; 0x756 <__bad_interrupt>
  16:	9f c3       	rjmp	.+1854   	; 0x756 <__bad_interrupt>
  18:	9e c3       	rjmp	.+1852   	; 0x756 <__bad_interrupt>
  1a:	70 c3       	rjmp	.+1760   	; 0x6fc <__vector_13>
  1c:	9c c3       	rjmp	.+1848   	; 0x756 <__bad_interrupt>
  1e:	9b c3       	rjmp	.+1846   	; 0x756 <__bad_interrupt>
  20:	9a c3       	rjmp	.+1844   	; 0x756 <__bad_interrupt>
  22:	99 c3       	rjmp	.+1842   	; 0x756 <__bad_interrupt>
  24:	98 c3       	rjmp	.+1840   	; 0x756 <__bad_interrupt>
  26:	97 c3       	rjmp	.+1838   	; 0x756 <__bad_interrupt>
  28:	96 c3       	rjmp	.+1836   	; 0x756 <__bad_interrupt>

0000002a <.dinit>:
  2a:	00 60       	ori	r16, 0x00	; 0
  2c:	00 89       	ldd	r16, Z+16	; 0x10
  2e:	80 00       	.word	0x0080	; ????
  30:	89 00       	.word	0x0089	; ????
  32:	a1 00       	.word	0x00a1	; ????
  34:	07 58       	subi	r16, 0x87	; 135
  36:	00 a1       	ldd	r16, Z+32	; 0x20
  38:	00 b3       	in	r16, 0x10	; 16
  3a:	80 00       	.word	0x0080	; ????

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ed       	ldi	r28, 0xDF	; 223
  42:	cd bf       	out	0x3d, r28	; 61

00000044 <__do_copy_data>:
  44:	ea e2       	ldi	r30, 0x2A	; 42
  46:	f0 e0       	ldi	r31, 0x00	; 0
  48:	40 e0       	ldi	r20, 0x00	; 0
  4a:	17 c0       	rjmp	.+46     	; 0x7a <__do_clear_bss+0x8>
  4c:	b5 91       	lpm	r27, Z+
  4e:	a5 91       	lpm	r26, Z+
  50:	35 91       	lpm	r19, Z+
  52:	25 91       	lpm	r18, Z+
  54:	05 91       	lpm	r16, Z+
  56:	07 fd       	sbrc	r16, 7
  58:	0c c0       	rjmp	.+24     	; 0x72 <__do_clear_bss>
  5a:	95 91       	lpm	r25, Z+
  5c:	85 91       	lpm	r24, Z+
  5e:	ef 01       	movw	r28, r30
  60:	f9 2f       	mov	r31, r25
  62:	e8 2f       	mov	r30, r24
  64:	05 90       	lpm	r0, Z+
  66:	0d 92       	st	X+, r0
  68:	a2 17       	cp	r26, r18
  6a:	b3 07       	cpc	r27, r19
  6c:	d9 f7       	brne	.-10     	; 0x64 <__do_copy_data+0x20>
  6e:	fe 01       	movw	r30, r28
  70:	04 c0       	rjmp	.+8      	; 0x7a <__do_clear_bss+0x8>

00000072 <__do_clear_bss>:
  72:	1d 92       	st	X+, r1
  74:	a2 17       	cp	r26, r18
  76:	b3 07       	cpc	r27, r19
  78:	e1 f7       	brne	.-8      	; 0x72 <__do_clear_bss>
  7a:	eb 33       	cpi	r30, 0x3B	; 59
  7c:	f4 07       	cpc	r31, r20
  7e:	31 f7       	brne	.-52     	; 0x4c <__do_copy_data+0x8>
  80:	63 d3       	rcall	.+1734   	; 0x748 <main>
  82:	00 c0       	rjmp	.+0      	; 0x84 <_exit>

00000084 <_exit>:
  84:	f8 94       	cli

00000086 <__stop_program>:
  86:	ff cf       	rjmp	.-2      	; 0x86 <__stop_program>

Disassembly of section .text:

00000756 <__bad_interrupt>:
 756:	54 cc       	rjmp	.-1880   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_13:

000006fc <__vector_13>:
	//TIMSK |=  (1<<OCIE0A);//устанавливаем бит разрешения прерывания таймера по совпадению  (1<<TOIE0) |
	//TCCR0B |= (1<<CS02) | (1<<CS00);
 }
 //------------функция-обработчик таймера-------------
 ISR (TIMER0_COMPA_vect)//	TIMER0_COMPA_vect   
 {
 6fc:	1f 92       	push	r1
 6fe:	0f 92       	push	r0
 700:	0f b6       	in	r0, 0x3f	; 63
 702:	0f 92       	push	r0
 704:	11 24       	eor	r1, r1
 706:	8f 93       	push	r24
time_tim ++;
 708:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <time_tim>
 70c:	8f 5f       	subi	r24, 0xFF	; 255
 70e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <time_tim>
	 TIMSK = 0b00000000;
 712:	19 be       	out	0x39, r1	; 57
	 TCCR0B = 0b00000000;//останавливаем таймер
 714:	13 be       	out	0x33, r1	; 51
 }
 716:	8f 91       	pop	r24
 718:	0f 90       	pop	r0
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	0f 90       	pop	r0
 71e:	1f 90       	pop	r1
 720:	18 95       	reti

Disassembly of section .text.frame_out:

00000088 <frame_out>:
	TCCR0B |= (1 << CS02) | (1 << CS00) ;//устанавливаем делитель 1024	
	TCNT0 = 0b00000000;//обнуляем таймер 
	//TIMSK = 0b00000001;//|= (1<<OCIE0A);//устанавливаем бит разрешения прерывания счетчика по совпадению
	//TIMSK0 =0b00000000;//&= ~0x01;
	TCNT0 = 0b00000000;// установка начального значения таймера 11101000
	OCR0A = 0b00010110;//записываем в регистр число для сравнения	00110010
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <time_tim>
  90:	8f 30       	cpi	r24, 0x0F	; 15
  92:	a9 f4       	brne	.+42     	; 0xbe <frame_out+0x36>
  94:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <start_run_fraim>
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <start_tim>
  9e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <time_tim>
  a2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <v>
  a6:	8f 5f       	subi	r24, 0xFF	; 255
  a8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <v>
  ac:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <kll>
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	28 f0       	brcs	.+10     	; 0xbe <frame_out+0x36>
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <kll>
  ba:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <v>
  be:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <start_run_fraim>
  c2:	8f 5f       	subi	r24, 0xFF	; 255
  c4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <start_run_fraim>
  c8:	8b 30       	cpi	r24, 0x0B	; 11
  ca:	08 f0       	brcs	.+2      	; 0xce <frame_out+0x46>
  cc:	55 c0       	rjmp	.+170    	; 0x178 <__stack+0x99>
  ce:	60 91 a3 00 	lds	r22, 0x00A3	; 0x8000a3 <result_output+0x2>
  d2:	70 91 a4 00 	lds	r23, 0x00A4	; 0x8000a4 <result_output+0x3>
  d6:	70 93 7f 00 	sts	0x007F, r23	; 0x80007f <start_tim>
  da:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <start_izm>
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	17 c0       	rjmp	.+46     	; 0x112 <__stack+0x33>
  e4:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <vpo>
  e8:	2f 5f       	subi	r18, 0xFF	; 255
  ea:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <vpo>
  ee:	9c 01       	movw	r18, r24
  f0:	2f 5f       	subi	r18, 0xFF	; 255
  f2:	3f 4f       	sbci	r19, 0xFF	; 255
  f4:	f9 01       	movw	r30, r18
  f6:	ee 0f       	add	r30, r30
  f8:	ff 1f       	adc	r31, r31
  fa:	ef 55       	subi	r30, 0x5F	; 95
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	40 81       	ld	r20, Z
 100:	51 81       	ldd	r21, Z+1	; 0x01
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	fc 01       	movw	r30, r24
 108:	ef 55       	subi	r30, 0x5F	; 95
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	51 83       	std	Z+1, r21	; 0x01
 10e:	40 83       	st	Z, r20
 110:	c9 01       	movw	r24, r18
 112:	8b 30       	cpi	r24, 0x0B	; 11
 114:	91 05       	cpc	r25, r1
 116:	34 f3       	brlt	.-52     	; 0xe4 <__stack+0x5>
 118:	70 93 b4 00 	sts	0x00B4, r23	; 0x8000b4 <__heap_start+0x1>
 11c:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__heap_start>
 120:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <vpo>
 124:	8e 31       	cpi	r24, 0x1E	; 30
 126:	09 f4       	brne	.+2      	; 0x12a <__stack+0x4b>
 128:	4b c0       	rjmp	.+150    	; 0x1c0 <__stack+0xe1>
 12a:	28 f4       	brcc	.+10     	; 0x136 <__stack+0x57>
 12c:	8a 30       	cpi	r24, 0x0A	; 10
 12e:	61 f0       	breq	.+24     	; 0x148 <__stack+0x69>
 130:	84 31       	cpi	r24, 0x14	; 20
 132:	29 f1       	breq	.+74     	; 0x17e <__stack+0x9f>
 134:	21 c0       	rjmp	.+66     	; 0x178 <__stack+0x99>
 136:	82 33       	cpi	r24, 0x32	; 50
 138:	09 f4       	brne	.+2      	; 0x13c <__stack+0x5d>
 13a:	84 c0       	rjmp	.+264    	; 0x244 <__stack+0x165>
 13c:	8e 36       	cpi	r24, 0x6E	; 110
 13e:	09 f4       	brne	.+2      	; 0x142 <__stack+0x63>
 140:	12 c1       	rjmp	.+548    	; 0x366 <__stack+0x287>
 142:	88 32       	cpi	r24, 0x28	; 40
 144:	c9 f4       	brne	.+50     	; 0x178 <__stack+0x99>
 146:	5d c0       	rjmp	.+186    	; 0x202 <__stack+0x123>
 148:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <digit1>
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	e1 ea       	ldi	r30, 0xA1	; 161
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	93 83       	std	Z+3, r25	; 0x03
 154:	82 83       	std	Z+2, r24	; 0x02
 156:	95 83       	std	Z+5, r25	; 0x05
 158:	84 83       	std	Z+4, r24	; 0x04
 15a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <digit2>
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	97 83       	std	Z+7, r25	; 0x07
 162:	86 83       	std	Z+6, r24	; 0x06
 164:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <digit3>
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	91 87       	std	Z+9, r25	; 0x09
 16c:	80 87       	std	Z+8, r24	; 0x08
 16e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <digit4>
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	93 87       	std	Z+11, r25	; 0x0b
 176:	82 87       	std	Z+10, r24	; 0x0a
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	65 c1       	rjmp	.+714    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 17e:	e1 ea       	ldi	r30, 0xA1	; 161
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <digit1>
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	93 83       	std	Z+3, r25	; 0x03
 18a:	82 83       	std	Z+2, r24	; 0x02
 18c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <digit2>
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	95 83       	std	Z+5, r25	; 0x05
 194:	84 83       	std	Z+4, r24	; 0x04
 196:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <digit3>
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	97 83       	std	Z+7, r25	; 0x07
 19e:	86 83       	std	Z+6, r24	; 0x06
 1a0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <digit4>
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	91 87       	std	Z+9, r25	; 0x09
 1a8:	80 87       	std	Z+8, r24	; 0x08
 1aa:	13 86       	std	Z+11, r1	; 0x0b
 1ac:	12 86       	std	Z+10, r1	; 0x0a
 1ae:	15 86       	std	Z+13, r1	; 0x0d
 1b0:	14 86       	std	Z+12, r1	; 0x0c
 1b2:	17 86       	std	Z+15, r1	; 0x0f
 1b4:	16 86       	std	Z+14, r1	; 0x0e
 1b6:	11 8a       	std	Z+17, r1	; 0x11
 1b8:	10 8a       	std	Z+16, r1	; 0x10
 1ba:	13 8a       	std	Z+19, r1	; 0x13
 1bc:	12 8a       	std	Z+18, r1	; 0x12
 1be:	dc cf       	rjmp	.-72     	; 0x178 <__stack+0x99>
 1c0:	e1 ea       	ldi	r30, 0xA1	; 161
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <digit2>
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	93 83       	std	Z+3, r25	; 0x03
 1cc:	82 83       	std	Z+2, r24	; 0x02
 1ce:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <digit3>
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	95 83       	std	Z+5, r25	; 0x05
 1d6:	84 83       	std	Z+4, r24	; 0x04
 1d8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <digit4>
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	97 83       	std	Z+7, r25	; 0x07
 1e0:	86 83       	std	Z+6, r24	; 0x06
 1e2:	11 86       	std	Z+9, r1	; 0x09
 1e4:	10 86       	std	Z+8, r1	; 0x08
 1e6:	13 86       	std	Z+11, r1	; 0x0b
 1e8:	12 86       	std	Z+10, r1	; 0x0a
 1ea:	15 86       	std	Z+13, r1	; 0x0d
 1ec:	14 86       	std	Z+12, r1	; 0x0c
 1ee:	17 86       	std	Z+15, r1	; 0x0f
 1f0:	16 86       	std	Z+14, r1	; 0x0e
 1f2:	11 8a       	std	Z+17, r1	; 0x11
 1f4:	10 8a       	std	Z+16, r1	; 0x10
 1f6:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <digit1>
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	93 8b       	std	Z+19, r25	; 0x13
 1fe:	82 8b       	std	Z+18, r24	; 0x12
 200:	bb cf       	rjmp	.-138    	; 0x178 <__stack+0x99>
 202:	e1 ea       	ldi	r30, 0xA1	; 161
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <digit3>
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	93 83       	std	Z+3, r25	; 0x03
 20e:	82 83       	std	Z+2, r24	; 0x02
 210:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <digit4>
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	95 83       	std	Z+5, r25	; 0x05
 218:	84 83       	std	Z+4, r24	; 0x04
 21a:	17 82       	std	Z+7, r1	; 0x07
 21c:	16 82       	std	Z+6, r1	; 0x06
 21e:	11 86       	std	Z+9, r1	; 0x09
 220:	10 86       	std	Z+8, r1	; 0x08
 222:	13 86       	std	Z+11, r1	; 0x0b
 224:	12 86       	std	Z+10, r1	; 0x0a
 226:	15 86       	std	Z+13, r1	; 0x0d
 228:	14 86       	std	Z+12, r1	; 0x0c
 22a:	17 86       	std	Z+15, r1	; 0x0f
 22c:	16 86       	std	Z+14, r1	; 0x0e
 22e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <digit1>
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	91 8b       	std	Z+17, r25	; 0x11
 236:	80 8b       	std	Z+16, r24	; 0x10
 238:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <digit2>
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	93 8b       	std	Z+19, r25	; 0x13
 240:	82 8b       	std	Z+18, r24	; 0x12
 242:	9a cf       	rjmp	.-204    	; 0x178 <__stack+0x99>
 244:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <kll>
 248:	81 11       	cpse	r24, r1
 24a:	27 c0       	rjmp	.+78     	; 0x29a <__stack+0x1bb>
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0f d1       	rcall	.+542    	; 0x46e <dt_check>
 250:	80 ff       	sbrs	r24, 0
 252:	04 c0       	rjmp	.+8      	; 0x25c <__stack+0x17d>
 254:	25 e0       	ldi	r18, 0x05	; 5
 256:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <chh_h>
 25a:	02 c0       	rjmp	.+4      	; 0x260 <__stack+0x181>
 25c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <chh_h>
 260:	9c 01       	movw	r18, r24
 262:	99 23       	and	r25, r25
 264:	14 f4       	brge	.+4      	; 0x26a <__stack+0x18b>
 266:	2f 5f       	subi	r18, 0xFF	; 255
 268:	3f 4f       	sbci	r19, 0xFF	; 255
 26a:	35 95       	asr	r19
 26c:	27 95       	ror	r18
 26e:	30 93 64 00 	sts	0x0064, r19	; 0x800064 <temp+0x1>
 272:	20 93 63 00 	sts	0x0063, r18	; 0x800063 <temp>
 276:	ea e0       	ldi	r30, 0x0A	; 10
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	c9 01       	movw	r24, r18
 27c:	bf 01       	movw	r22, r30
 27e:	51 d2       	rcall	.+1186   	; 0x722 <__divmodhi4>
 280:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <ch>
 284:	c9 01       	movw	r24, r18
 286:	64 e6       	ldi	r22, 0x64	; 100
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	4b d2       	rcall	.+1174   	; 0x722 <__divmodhi4>
 28c:	bf 01       	movw	r22, r30
 28e:	49 d2       	rcall	.+1170   	; 0x722 <__divmodhi4>
 290:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
 294:	84 e0       	ldi	r24, 0x04	; 4
 296:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <digit1>
 29a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <kll>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	41 f5       	brne	.+80     	; 0x2f2 <__stack+0x213>
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	e4 d0       	rcall	.+456    	; 0x46e <dt_check>
 2a6:	9c 01       	movw	r18, r24
 2a8:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <temp+0x1>
 2ac:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <temp>
 2b0:	ca e0       	ldi	r28, 0x0A	; 10
 2b2:	d0 e0       	ldi	r29, 0x00	; 0
 2b4:	be 01       	movw	r22, r28
 2b6:	35 d2       	rcall	.+1130   	; 0x722 <__divmodhi4>
 2b8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <chh_h>
 2bc:	e4 e6       	ldi	r30, 0x64	; 100
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	c9 01       	movw	r24, r18
 2c2:	bf 01       	movw	r22, r30
 2c4:	2e d2       	rcall	.+1116   	; 0x722 <__divmodhi4>
 2c6:	be 01       	movw	r22, r28
 2c8:	2c d2       	rcall	.+1112   	; 0x722 <__divmodhi4>
 2ca:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <ch>
 2ce:	c9 01       	movw	r24, r18
 2d0:	68 ee       	ldi	r22, 0xE8	; 232
 2d2:	73 e0       	ldi	r23, 0x03	; 3
 2d4:	26 d2       	rcall	.+1100   	; 0x722 <__divmodhi4>
 2d6:	bf 01       	movw	r22, r30
 2d8:	24 d2       	rcall	.+1096   	; 0x722 <__divmodhi4>
 2da:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
 2de:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <chhh>
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	ee 0f       	add	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	e7 57       	subi	r30, 0x77	; 119
 2ea:	ff 4f       	sbci	r31, 0xFF	; 255
 2ec:	80 81       	ld	r24, Z
 2ee:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <digit1>
 2f2:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <chh_h>
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ee 0f       	add	r30, r30
 2fa:	ff 1f       	adc	r31, r31
 2fc:	e7 57       	subi	r30, 0x77	; 119
 2fe:	ff 4f       	sbci	r31, 0xFF	; 255
 300:	40 81       	ld	r20, Z
 302:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <digit4>
 306:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <ch>
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	ee 0f       	add	r30, r30
 30e:	ff 1f       	adc	r31, r31
 310:	e7 57       	subi	r30, 0x77	; 119
 312:	ff 4f       	sbci	r31, 0xFF	; 255
 314:	80 81       	ld	r24, Z
 316:	80 68       	ori	r24, 0x80	; 128
 318:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <digit3>
 31c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	ee 0f       	add	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	e7 57       	subi	r30, 0x77	; 119
 328:	ff 4f       	sbci	r31, 0xFF	; 255
 32a:	20 81       	ld	r18, Z
 32c:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <digit2>
 330:	e1 ea       	ldi	r30, 0xA1	; 161
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	50 e0       	ldi	r21, 0x00	; 0
 336:	53 83       	std	Z+3, r21	; 0x03
 338:	42 83       	std	Z+2, r20	; 0x02
 33a:	15 82       	std	Z+5, r1	; 0x05
 33c:	14 82       	std	Z+4, r1	; 0x04
 33e:	17 82       	std	Z+7, r1	; 0x07
 340:	16 82       	std	Z+6, r1	; 0x06
 342:	11 86       	std	Z+9, r1	; 0x09
 344:	10 86       	std	Z+8, r1	; 0x08
 346:	13 86       	std	Z+11, r1	; 0x0b
 348:	12 86       	std	Z+10, r1	; 0x0a
 34a:	15 86       	std	Z+13, r1	; 0x0d
 34c:	14 86       	std	Z+12, r1	; 0x0c
 34e:	40 91 83 00 	lds	r20, 0x0083	; 0x800083 <digit1>
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	57 87       	std	Z+15, r21	; 0x0f
 356:	46 87       	std	Z+14, r20	; 0x0e
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	31 8b       	std	Z+17, r19	; 0x11
 35c:	20 8b       	std	Z+16, r18	; 0x10
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	93 8b       	std	Z+19, r25	; 0x13
 362:	82 8b       	std	Z+18, r24	; 0x12
 364:	09 cf       	rjmp	.-494    	; 0x178 <__stack+0x99>
 366:	e1 ea       	ldi	r30, 0xA1	; 161
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	13 82       	std	Z+3, r1	; 0x03
 36c:	12 82       	std	Z+2, r1	; 0x02
 36e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <digit1>
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	95 83       	std	Z+5, r25	; 0x05
 376:	84 83       	std	Z+4, r24	; 0x04
 378:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <digit2>
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	97 83       	std	Z+7, r25	; 0x07
 380:	86 83       	std	Z+6, r24	; 0x06
 382:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <digit3>
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	91 87       	std	Z+9, r25	; 0x09
 38a:	80 87       	std	Z+8, r24	; 0x08
 38c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <digit4>
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	93 87       	std	Z+11, r25	; 0x0b
 394:	82 87       	std	Z+10, r24	; 0x0a
 396:	8a e0       	ldi	r24, 0x0A	; 10
 398:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <vpo>
 39c:	ed ce       	rjmp	.-550    	; 0x178 <__stack+0x99>
 39e:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <l>
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	ee 0f       	add	r30, r30
 3a6:	ff 1f       	adc	r31, r31
 3a8:	ef 55       	subi	r30, 0x5F	; 95
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	80 81       	ld	r24, Z
 3ae:	88 bb       	out	0x18, r24	; 24
 3b0:	8b ed       	ldi	r24, 0xDB	; 219
 3b2:	95 e0       	ldi	r25, 0x05	; 5
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <__stack+0x2d5>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <__stack+0x2db>
 3ba:	00 00       	nop
 3bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <l>
 3c0:	82 30       	cpi	r24, 0x02	; 2
 3c2:	b9 f0       	breq	.+46     	; 0x3f2 <__stack+0x313>
 3c4:	28 f4       	brcc	.+10     	; 0x3d0 <__stack+0x2f1>
 3c6:	88 23       	and	r24, r24
 3c8:	49 f0       	breq	.+18     	; 0x3dc <__stack+0x2fd>
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	59 f0       	breq	.+22     	; 0x3e4 <__stack+0x305>
 3ce:	29 c0       	rjmp	.+82     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3d0:	84 30       	cpi	r24, 0x04	; 4
 3d2:	e9 f0       	breq	.+58     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3d4:	a8 f0       	brcs	.+42     	; 0x400 <__LOCK_REGION_LENGTH__>
 3d6:	85 30       	cpi	r24, 0x05	; 5
 3d8:	09 f1       	breq	.+66     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3da:	23 c0       	rjmp	.+70     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3dc:	82 b3       	in	r24, 0x12	; 18
 3de:	8f 60       	ori	r24, 0x0F	; 15
 3e0:	82 bb       	out	0x12, r24	; 18
 3e2:	1f c0       	rjmp	.+62     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3e4:	82 b3       	in	r24, 0x12	; 18
 3e6:	8f 60       	ori	r24, 0x0F	; 15
 3e8:	82 bb       	out	0x12, r24	; 18
 3ea:	82 b3       	in	r24, 0x12	; 18
 3ec:	8b 7f       	andi	r24, 0xFB	; 251
 3ee:	82 bb       	out	0x12, r24	; 18
 3f0:	18 c0       	rjmp	.+48     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3f2:	82 b3       	in	r24, 0x12	; 18
 3f4:	8f 60       	ori	r24, 0x0F	; 15
 3f6:	82 bb       	out	0x12, r24	; 18
 3f8:	82 b3       	in	r24, 0x12	; 18
 3fa:	8d 7f       	andi	r24, 0xFD	; 253
 3fc:	82 bb       	out	0x12, r24	; 18
 3fe:	11 c0       	rjmp	.+34     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 400:	82 b3       	in	r24, 0x12	; 18
 402:	8f 60       	ori	r24, 0x0F	; 15
 404:	82 bb       	out	0x12, r24	; 18
 406:	82 b3       	in	r24, 0x12	; 18
 408:	8e 7f       	andi	r24, 0xFE	; 254
 40a:	82 bb       	out	0x12, r24	; 18
 40c:	0a c0       	rjmp	.+20     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 40e:	82 b3       	in	r24, 0x12	; 18
 410:	8f 60       	ori	r24, 0x0F	; 15
 412:	82 bb       	out	0x12, r24	; 18
 414:	82 b3       	in	r24, 0x12	; 18
 416:	87 7f       	andi	r24, 0xF7	; 247
 418:	82 bb       	out	0x12, r24	; 18
 41a:	03 c0       	rjmp	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41c:	82 b3       	in	r24, 0x12	; 18
 41e:	8f 60       	ori	r24, 0x0F	; 15
 420:	82 bb       	out	0x12, r24	; 18
 422:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <l>
 426:	9f 5f       	subi	r25, 0xFF	; 255
 428:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <l>
 42c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <y>
 430:	8f 5f       	subi	r24, 0xFF	; 255
 432:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <y>
 436:	89 30       	cpi	r24, 0x09	; 9
 438:	29 f4       	brne	.+10     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 43a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <y>
 43e:	99 50       	subi	r25, 0x09	; 9
 440:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <l>
 444:	2f 5f       	subi	r18, 0xFF	; 255
 446:	3f 4f       	sbci	r19, 0xFF	; 255
 448:	2e 35       	cpi	r18, 0x5E	; 94
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	39 07       	cpc	r19, r25
 44e:	0c f4       	brge	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 450:	a6 cf       	rjmp	.-180    	; 0x39e <__stack+0x2bf>
 452:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <start_tim>
 456:	81 11       	cpse	r24, r1
 458:	07 c0       	rjmp	.+14     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 45a:	89 b7       	in	r24, 0x39	; 57
 45c:	81 60       	ori	r24, 0x01	; 1
 45e:	89 bf       	out	0x39, r24	; 57
 460:	83 b7       	in	r24, 0x33	; 51
 462:	85 60       	ori	r24, 0x05	; 5
 464:	83 bf       	out	0x33, r24	; 51
 466:	12 be       	out	0x32, r1	; 50
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

Disassembly of section .text.main:

00000748 <main>:
}
}
//-----------------------------------------------------
int main(void)
{
    sei();//разрешаем глобальные прерывания
 748:	78 94       	sei
	DDRB = 0b11111111;// определяем выходы мк (1 выход; 0 вход); 
 74a:	8f ef       	ldi	r24, 0xFF	; 255
 74c:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b01001111;// определяем выходы мк (1 выход; 0 вход);
 74e:	8f e4       	ldi	r24, 0x4F	; 79
 750:	81 bb       	out	0x11, r24	; 17
    while(1)
    {	
		frame_out();	
 752:	9a dc       	rcall	.-1740   	; 0x88 <__data_load_end>
 754:	fe cf       	rjmp	.-4      	; 0x752 <main+0xa>

Disassembly of section .text.dt_testdevice:

000005c4 <dt_testdevice>:
		dt_sendbyte(0xCB);	
	    }			
}
char dt_testdevice(void) //dt - digital termomether | определим, есть ли устройство на шине
{
	DDRTEMP |= 1 << BITTEMP;  //притягиваем шину  |= 0x20; 
 5c4:	81 b3       	in	r24, 0x11	; 17
 5c6:	80 62       	ori	r24, 0x20	; 32
 5c8:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ca:	87 ee       	ldi	r24, 0xE7	; 231
 5cc:	93 e0       	ldi	r25, 0x03	; 3
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <dt_testdevice+0xa>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <dt_testdevice+0x10>
 5d4:	00 00       	nop
	_delay_us(500); //задержка как минимум на 480 микросекунд
	DDRTEMP &= ~ (1 << BITTEMP); //отпускаем шину  &= ~0x20;
 5d6:	81 b3       	in	r24, 0x11	; 17
 5d8:	8f 7d       	andi	r24, 0xDF	; 223
 5da:	81 bb       	out	0x11, r24	; 17
 5dc:	9d ea       	ldi	r25, 0xAD	; 173
 5de:	9a 95       	dec	r25
 5e0:	f1 f7       	brne	.-4      	; 0x5de <dt_testdevice+0x1a>
 5e2:	00 00       	nop
	_delay_us(65); //задержка как минимум на 60 микросекунд
	if ((PINTEMP & (1 << BITTEMP)) == 0)//проверяем, ответит ли устройство
 5e4:	85 99       	sbic	0x10, 5	; 16
 5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <dt_testdevice+0x2c>
	{
		dt = 1;//устройство есть
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <dt>
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <dt_testdevice+0x30>
	}
	else {
		dt = 0;//устройства нет
 5f0:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <dt>
 5f4:	87 ee       	ldi	r24, 0xE7	; 231
 5f6:	93 e0       	ldi	r25, 0x03	; 3
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <dt_testdevice+0x34>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <dt_testdevice+0x3a>
 5fe:	00 00       	nop
	}
	_delay_us(500); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
	return dt; //вернем результат
}
 600:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <dt>
 604:	08 95       	ret

Disassembly of section .text.dt_sendbit:

000006ac <dt_sendbit>:
//========================================
void dt_sendbit(char bt)//функция записи бита на устройство
{
DDRTEMP |= 1 << BITTEMP;  //притягиваем шину
 6ac:	91 b3       	in	r25, 0x11	; 17
 6ae:	90 62       	ori	r25, 0x20	; 32
 6b0:	91 bb       	out	0x11, r25	; 17
 6b2:	95 e0       	ldi	r25, 0x05	; 5
 6b4:	9a 95       	dec	r25
 6b6:	f1 f7       	brne	.-4      	; 0x6b4 <dt_sendbit+0x8>
 6b8:	00 00       	nop
_delay_us(2); //задержка как минимум на 2 микросекунд
//dela_y (1);
if(bt)
 6ba:	88 23       	and	r24, r24
 6bc:	19 f0       	breq	.+6      	; 0x6c4 <dt_sendbit+0x18>
DDRTEMP &= ~ (1 << BITTEMP); //отпускаем шину
 6be:	81 b3       	in	r24, 0x11	; 17
 6c0:	8f 7d       	andi	r24, 0xDF	; 223
 6c2:	81 bb       	out	0x11, r24	; 17
 6c4:	8d ea       	ldi	r24, 0xAD	; 173
 6c6:	8a 95       	dec	r24
 6c8:	f1 f7       	brne	.-4      	; 0x6c6 <dt_sendbit+0x1a>
 6ca:	00 00       	nop
_delay_us(65); //задержка как минимум на 65 микросекунд
//dela_y (22);
DDRTEMP &= ~ (1 << BITTEMP); //отпускаем шину
 6cc:	81 b3       	in	r24, 0x11	; 17
 6ce:	8f 7d       	andi	r24, 0xDF	; 223
 6d0:	81 bb       	out	0x11, r24	; 17
 6d2:	08 95       	ret

Disassembly of section .text.dt_sendbyte:

00000606 <dt_sendbyte>:
}
//========================================
void dt_sendbyte(unsigned char bt)//функция записи байта на устройство
{
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
 60a:	d8 2f       	mov	r29, r24
char i;
for(i = 0;i < 8;i ++)//посылаем отдельно каждый бит на устройство
 60c:	c0 e0       	ldi	r28, 0x00	; 0
 60e:	15 c0       	rjmp	.+42     	; 0x63a <dt_sendbyte+0x34>
{
	if((bt & (1 << i)) == 1 << i)//посылаем 1
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	0c 2e       	mov	r0, r28
 616:	02 c0       	rjmp	.+4      	; 0x61c <dt_sendbyte+0x16>
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	0a 94       	dec	r0
 61e:	e2 f7       	brpl	.-8      	; 0x618 <dt_sendbyte+0x12>
 620:	2d 2f       	mov	r18, r29
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	28 23       	and	r18, r24
 626:	39 23       	and	r19, r25
 628:	82 17       	cp	r24, r18
 62a:	93 07       	cpc	r25, r19
 62c:	19 f4       	brne	.+6      	; 0x634 <dt_sendbyte+0x2e>
	dt_sendbit(1);
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	3d d0       	rcall	.+122    	; 0x6ac <dt_sendbit>
 632:	02 c0       	rjmp	.+4      	; 0x638 <dt_sendbyte+0x32>
	else //посылаем 0
	dt_sendbit(0);
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	3a d0       	rcall	.+116    	; 0x6ac <dt_sendbit>
}
//========================================
void dt_sendbyte(unsigned char bt)//функция записи байта на устройство
{
char i;
for(i = 0;i < 8;i ++)//посылаем отдельно каждый бит на устройство
 638:	cf 5f       	subi	r28, 0xFF	; 255
 63a:	c8 30       	cpi	r28, 0x08	; 8
 63c:	48 f3       	brcs	.-46     	; 0x610 <dt_sendbyte+0xa>
	if((bt & (1 << i)) == 1 << i)//посылаем 1
	dt_sendbit(1);
	else //посылаем 0
	dt_sendbit(0);
}	
}
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	08 95       	ret

Disassembly of section .text.ds18x2_sel:

00000570 <ds18x2_sel>:
//char bt;
char dt;
int ttt;
//int identifi [8] = {0b00001000,0b01110000,0b01111101,0b01101000,0b01000000,0b00000000,0b00010000,0b01101000};	
//====================================
void ds18x2_sel(unsigned char dat){//отправляем ROM адрес датчика
 570:	cf 93       	push	r28
 572:	c8 2f       	mov	r28, r24
dt_sendbyte(MATCH_ROM);
 574:	85 e5       	ldi	r24, 0x55	; 85
 576:	47 d0       	rcall	.+142    	; 0x606 <dt_sendbyte>
if (dat == 1){//1
 578:	c1 30       	cpi	r28, 0x01	; 1
 57a:	81 f4       	brne	.+32     	; 0x59c <ds18x2_sel+0x2c>
//-------Датчик внутренний DS1820---------------
		dt_sendbyte(0x10);
 57c:	80 e1       	ldi	r24, 0x10	; 16
 57e:	43 d0       	rcall	.+134    	; 0x606 <dt_sendbyte>
		dt_sendbyte(0x4E);
 580:	8e e4       	ldi	r24, 0x4E	; 78
 582:	41 d0       	rcall	.+130    	; 0x606 <dt_sendbyte>
		dt_sendbyte(0xBE);
 584:	8e eb       	ldi	r24, 0xBE	; 190
 586:	3f d0       	rcall	.+126    	; 0x606 <dt_sendbyte>
		dt_sendbyte(0x57);
 588:	87 e5       	ldi	r24, 0x57	; 87
 58a:	3d d0       	rcall	.+122    	; 0x606 <dt_sendbyte>
		dt_sendbyte(0x02);
 58c:	82 e0       	ldi	r24, 0x02	; 2
 58e:	3b d0       	rcall	.+118    	; 0x606 <dt_sendbyte>
		dt_sendbyte(0x08);
 590:	88 e0       	ldi	r24, 0x08	; 8
 592:	39 d0       	rcall	.+114    	; 0x606 <dt_sendbyte>
		dt_sendbyte(0x0);
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	37 d0       	rcall	.+110    	; 0x606 <dt_sendbyte>
		dt_sendbyte(0x17);
 598:	87 e1       	ldi	r24, 0x17	; 23
 59a:	35 d0       	rcall	.+106    	; 0x606 <dt_sendbyte>
		}
if (dat == 2){//2	
 59c:	c2 30       	cpi	r28, 0x02	; 2
 59e:	81 f4       	brne	.+32     	; 0x5c0 <ds18x2_sel+0x50>
//-------Датчик внешний DS18B20---------------					
	    dt_sendbyte(0x28);			
 5a0:	88 e2       	ldi	r24, 0x28	; 40
 5a2:	31 d0       	rcall	.+98     	; 0x606 <dt_sendbyte>
		dt_sendbyte(0x44);
 5a4:	84 e4       	ldi	r24, 0x44	; 68
 5a6:	2f d0       	rcall	.+94     	; 0x606 <dt_sendbyte>
		dt_sendbyte(0xD1);
 5a8:	81 ed       	ldi	r24, 0xD1	; 209
 5aa:	2d d0       	rcall	.+90     	; 0x606 <dt_sendbyte>
		dt_sendbyte(0xE9);
 5ac:	89 ee       	ldi	r24, 0xE9	; 233
 5ae:	2b d0       	rcall	.+86     	; 0x606 <dt_sendbyte>
		dt_sendbyte(0x05);
 5b0:	85 e0       	ldi	r24, 0x05	; 5
 5b2:	29 d0       	rcall	.+82     	; 0x606 <dt_sendbyte>
		dt_sendbyte(0x00);
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	27 d0       	rcall	.+78     	; 0x606 <dt_sendbyte>
		dt_sendbyte(0x00);
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	25 d0       	rcall	.+74     	; 0x606 <dt_sendbyte>
		dt_sendbyte(0xCB);	
 5bc:	8b ec       	ldi	r24, 0xCB	; 203
 5be:	23 d0       	rcall	.+70     	; 0x606 <dt_sendbyte>
	    }			
}
 5c0:	cf 91       	pop	r28
 5c2:	08 95       	ret

Disassembly of section .text.dt_readbit:

00000644 <dt_readbit>:
}
//========================================
char dt_readbit(void)//функция чтения бита с устройства
{
char bt;//переменная хранения бита
DDRTEMP |= 1 << BITTEMP; //притягиваем шину
 644:	81 b3       	in	r24, 0x11	; 17
 646:	80 62       	ori	r24, 0x20	; 32
 648:	81 bb       	out	0x11, r24	; 17
 64a:	25 e0       	ldi	r18, 0x05	; 5
 64c:	2a 95       	dec	r18
 64e:	f1 f7       	brne	.-4      	; 0x64c <dt_readbit+0x8>
 650:	00 00       	nop
_delay_us(2); //задержка как минимум на 2 микросекунды
//dela_y (1);
DDRTEMP &= ~ (1 << BITTEMP); //отпускаем шину
 652:	81 b3       	in	r24, 0x11	; 17
 654:	8f 7d       	andi	r24, 0xDF	; 223
 656:	81 bb       	out	0x11, r24	; 17
 658:	82 e2       	ldi	r24, 0x22	; 34
 65a:	8a 95       	dec	r24
 65c:	f1 f7       	brne	.-4      	; 0x65a <dt_readbit+0x16>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <dt_readbit+0x1c>
_delay_us(13);
//dela_y (4);
bt = (PINTEMP & (1 << BITTEMP)) >> BITTEMP; //читаем бит
 660:	80 b3       	in	r24, 0x10	; 16
 662:	80 72       	andi	r24, 0x20	; 32
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	95 95       	asr	r25
 668:	87 95       	ror	r24
 66a:	95 95       	asr	r25
 66c:	87 95       	ror	r24
 66e:	95 95       	asr	r25
 670:	87 95       	ror	r24
 672:	95 95       	asr	r25
 674:	87 95       	ror	r24
 676:	95 95       	asr	r25
 678:	87 95       	ror	r24
 67a:	28 e7       	ldi	r18, 0x78	; 120
 67c:	2a 95       	dec	r18
 67e:	f1 f7       	brne	.-4      	; 0x67c <dt_readbit+0x38>
_delay_us(45);
//dela_y (15);
return bt; //вернем результат	
}
 680:	08 95       	ret

Disassembly of section .text.dt_readbyte:

00000682 <dt_readbyte>:
//========================================
unsigned char dt_readbyte(void)//функция чтения байта с устройства
{
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
	char c = 0;
	char i;
	for(i = 0;i < 8;i ++)
 686:	c0 e0       	ldi	r28, 0x00	; 0
return bt; //вернем результат	
}
//========================================
unsigned char dt_readbyte(void)//функция чтения байта с устройства
{
	char c = 0;
 688:	d0 e0       	ldi	r29, 0x00	; 0
	char i;
	for(i = 0;i < 8;i ++)
 68a:	0a c0       	rjmp	.+20     	; 0x6a0 <dt_readbyte+0x1e>
	c |= dt_readbit() << i; //читаем бит
 68c:	db df       	rcall	.-74     	; 0x644 <dt_readbit>
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0c 2e       	mov	r0, r28
 692:	02 c0       	rjmp	.+4      	; 0x698 <dt_readbyte+0x16>
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	0a 94       	dec	r0
 69a:	e2 f7       	brpl	.-8      	; 0x694 <dt_readbyte+0x12>
 69c:	d8 2b       	or	r29, r24
//========================================
unsigned char dt_readbyte(void)//функция чтения байта с устройства
{
	char c = 0;
	char i;
	for(i = 0;i < 8;i ++)
 69e:	cf 5f       	subi	r28, 0xFF	; 255
 6a0:	c8 30       	cpi	r28, 0x08	; 8
 6a2:	a0 f3       	brcs	.-24     	; 0x68c <dt_readbyte+0xa>
	c |= dt_readbit() << i; //читаем бит
	return c;
}
 6a4:	8d 2f       	mov	r24, r29
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	08 95       	ret

Disassembly of section .text.dt_check:

0000046e <dt_check>:
//========================================
int dt_check(unsigned char izm)//функция преобразования показаний датчика в температуру
{
 46e:	ef 92       	push	r14
 470:	ff 92       	push	r15
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	18 2f       	mov	r17, r24
	unsigned int bt;//переменная для считывания байта
	unsigned int tt = 0;
	
	if(dt_testdevice() == 1) //если устройство нашлось
 47c:	a3 d0       	rcall	.+326    	; 0x5c4 <dt_testdevice>
 47e:	81 30       	cpi	r24, 0x01	; 1
 480:	09 f0       	breq	.+2      	; 0x484 <dt_check+0x16>
 482:	6c c0       	rjmp	.+216    	; 0x55c <dt_check+0xee>
	{		
ds18x2_sel(izm);
 484:	81 2f       	mov	r24, r17
 486:	74 d0       	rcall	.+232    	; 0x570 <ds18x2_sel>
//Чтение ROM
/*dt_sendbyte(READ_ROM);
for(i=0;i<8;i++){
	bt = dt_readbyte();
}*/
		dt_sendbyte(READ_DATA); //даем команду на чтение данных с устройства
 488:	8e eb       	ldi	r24, 0xBE	; 190
 48a:	bd d0       	rcall	.+378    	; 0x606 <dt_sendbyte>
		bt = dt_readbyte(); //читаем младший бит
 48c:	fa d0       	rcall	.+500    	; 0x682 <dt_readbyte>
 48e:	08 2f       	mov	r16, r24
 490:	e8 2e       	mov	r14, r24
 492:	f1 2c       	mov	r15, r1
		tt = dt_readbyte(); //читаем старший бит MS
 494:	f6 d0       	rcall	.+492    	; 0x682 <dt_readbyte>
 496:	c8 2f       	mov	r28, r24
 498:	d0 e0       	ldi	r29, 0x00	; 0
		dt_testdevice();//снова используем  те же манипуляции с шиной что и при проверке ее присутствия
 49a:	94 d0       	rcall	.+296    	; 0x5c4 <dt_testdevice>
		dt_sendbyte(NOID);
 49c:	8c ec       	ldi	r24, 0xCC	; 204
 49e:	b3 d0       	rcall	.+358    	; 0x606 <dt_sendbyte>
		dt_sendbyte(T_CONVERT);//44 измеряем температуру
 4a0:	84 e4       	ldi	r24, 0x44	; 68
 4a2:	b1 d0       	rcall	.+354    	; 0x606 <dt_sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a4:	8f ec       	ldi	r24, 0xCF	; 207
 4a6:	97 e0       	ldi	r25, 0x07	; 7
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <dt_check+0x3a>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <dt_check+0x40>
 4ae:	00 00       	nop
		_delay_ms(1);//в 12битном режиме преобразования - 750 милисекунд
		//dela_y (250);
if (izm == 1){//1
 4b0:	11 30       	cpi	r17, 0x01	; 1
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <dt_check+0x48>
		tt = bt;//для датчика 1820
 4b4:	e7 01       	movw	r28, r14
}
if (izm == 2) {//2
 4b6:	12 30       	cpi	r17, 0x02	; 2
 4b8:	09 f0       	breq	.+2      	; 0x4bc <dt_check+0x4e>
 4ba:	52 c0       	rjmp	.+164    	; 0x560 <dt_check+0xf2>
	if (tt & 0b11111000){//если отрицательная температура 
 4bc:	ce 01       	movw	r24, r28
 4be:	88 7f       	andi	r24, 0xF8	; 248
 4c0:	99 27       	eor	r25, r25
 4c2:	89 2b       	or	r24, r25
 4c4:	59 f1       	breq	.+86     	; 0x51c <dt_check+0xae>
	ttt = 9 - (bt & 0b00001111 / 2);//
 4c6:	07 70       	andi	r16, 0x07	; 7
 4c8:	29 e0       	ldi	r18, 0x09	; 9
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	20 1b       	sub	r18, r16
 4ce:	31 09       	sbc	r19, r1
 4d0:	30 93 88 00 	sts	0x0088, r19	; 0x800088 <ttt+0x1>
 4d4:	20 93 87 00 	sts	0x0087, r18	; 0x800087 <ttt>

			tt = (tt << 4) & 0b01111111;//
 4d8:	c2 95       	swap	r28
 4da:	d2 95       	swap	r29
 4dc:	d0 7f       	andi	r29, 0xF0	; 240
 4de:	dc 27       	eor	r29, r28
 4e0:	c0 7f       	andi	r28, 0xF0	; 240
 4e2:	dc 27       	eor	r29, r28
 4e4:	cf 77       	andi	r28, 0x7F	; 127
 4e6:	dd 27       	eor	r29, r29
			bt = bt >> 4;
 4e8:	c7 01       	movw	r24, r14
 4ea:	92 95       	swap	r25
 4ec:	82 95       	swap	r24
 4ee:	8f 70       	andi	r24, 0x0F	; 15
 4f0:	89 27       	eor	r24, r25
 4f2:	9f 70       	andi	r25, 0x0F	; 15
 4f4:	89 27       	eor	r24, r25
			tt = tt | bt;//
 4f6:	8c 2b       	or	r24, r28
 4f8:	9d 2b       	or	r25, r29
	        tt = ((0b10000000 - tt) * 10) + ttt;//
 4fa:	7c 01       	movw	r14, r24
 4fc:	ee 0c       	add	r14, r14
 4fe:	ff 1c       	adc	r15, r15
 500:	ee 0c       	add	r14, r14
 502:	ff 1c       	adc	r15, r15
 504:	8e 0d       	add	r24, r14
 506:	9f 1d       	adc	r25, r15
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	e9 01       	movw	r28, r18
 50e:	c8 1b       	sub	r28, r24
 510:	d9 0b       	sbc	r29, r25
 512:	db 5f       	subi	r29, 0xFB	; 251
	
	chhh = 10;//сотни
 514:	8a e0       	ldi	r24, 0x0A	; 10
 516:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <chhh>
 51a:	22 c0       	rjmp	.+68     	; 0x560 <dt_check+0xf2>
	}
	else{
	   tt = (tt << 8) | bt;//
 51c:	9c 2f       	mov	r25, r28
 51e:	88 27       	eor	r24, r24
 520:	8e 29       	or	r24, r14
 522:	9f 29       	or	r25, r15
	   tt = tt >> 3;
 524:	96 95       	lsr	r25
 526:	87 95       	ror	r24
 528:	96 95       	lsr	r25
 52a:	87 95       	ror	r24
 52c:	96 95       	lsr	r25
 52e:	87 95       	ror	r24
	   tt = (((tt >> 1) * 10) + ((tt % 10)));
 530:	9c 01       	movw	r18, r24
 532:	36 95       	lsr	r19
 534:	27 95       	ror	r18
 536:	e9 01       	movw	r28, r18
 538:	cc 0f       	add	r28, r28
 53a:	dd 1f       	adc	r29, r29
 53c:	cc 0f       	add	r28, r28
 53e:	dd 1f       	adc	r29, r29
 540:	2c 0f       	add	r18, r28
 542:	3d 1f       	adc	r19, r29
 544:	22 0f       	add	r18, r18
 546:	33 1f       	adc	r19, r19
 548:	6a e0       	ldi	r22, 0x0A	; 10
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	c3 d0       	rcall	.+390    	; 0x6d4 <__udivmodhi4>
 54e:	e9 01       	movw	r28, r18
 550:	c8 0f       	add	r28, r24
 552:	d9 1f       	adc	r29, r25
	   chhh = 11;
 554:	8b e0       	ldi	r24, 0x0B	; 11
 556:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <chhh>
 55a:	02 c0       	rjmp	.+4      	; 0x560 <dt_check+0xf2>
}
//========================================
int dt_check(unsigned char izm)//функция преобразования показаний датчика в температуру
{
	unsigned int bt;//переменная для считывания байта
	unsigned int tt = 0;
 55c:	c0 e0       	ldi	r28, 0x00	; 0
 55e:	d0 e0       	ldi	r29, 0x00	; 0
	   chhh = 11;
	}   
}
	}
	return tt;
}
 560:	ce 01       	movw	r24, r28
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	1f 91       	pop	r17
 568:	0f 91       	pop	r16
 56a:	ff 90       	pop	r15
 56c:	ef 90       	pop	r14
 56e:	08 95       	ret

Disassembly of section .text.libgcc.div:

000006d4 <__udivmodhi4>:
 6d4:	aa 1b       	sub	r26, r26
 6d6:	bb 1b       	sub	r27, r27
 6d8:	51 e1       	ldi	r21, 0x11	; 17
 6da:	07 c0       	rjmp	.+14     	; 0x6ea <__udivmodhi4_ep>

000006dc <__udivmodhi4_loop>:
 6dc:	aa 1f       	adc	r26, r26
 6de:	bb 1f       	adc	r27, r27
 6e0:	a6 17       	cp	r26, r22
 6e2:	b7 07       	cpc	r27, r23
 6e4:	10 f0       	brcs	.+4      	; 0x6ea <__udivmodhi4_ep>
 6e6:	a6 1b       	sub	r26, r22
 6e8:	b7 0b       	sbc	r27, r23

000006ea <__udivmodhi4_ep>:
 6ea:	88 1f       	adc	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	5a 95       	dec	r21
 6f0:	a9 f7       	brne	.-22     	; 0x6dc <__udivmodhi4_loop>
 6f2:	80 95       	com	r24
 6f4:	90 95       	com	r25
 6f6:	bc 01       	movw	r22, r24
 6f8:	cd 01       	movw	r24, r26
 6fa:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000722 <__divmodhi4>:
 722:	97 fb       	bst	r25, 7
 724:	07 2e       	mov	r0, r23
 726:	16 f4       	brtc	.+4      	; 0x72c <__divmodhi4+0xa>
 728:	00 94       	com	r0
 72a:	06 d0       	rcall	.+12     	; 0x738 <__divmodhi4_neg1>
 72c:	77 fd       	sbrc	r23, 7
 72e:	08 d0       	rcall	.+16     	; 0x740 <__divmodhi4_neg2>
 730:	d1 df       	rcall	.-94     	; 0x6d4 <__udivmodhi4>
 732:	07 fc       	sbrc	r0, 7
 734:	05 d0       	rcall	.+10     	; 0x740 <__divmodhi4_neg2>
 736:	3e f4       	brtc	.+14     	; 0x746 <__divmodhi4_exit>

00000738 <__divmodhi4_neg1>:
 738:	90 95       	com	r25
 73a:	81 95       	neg	r24
 73c:	9f 4f       	sbci	r25, 0xFF	; 255
 73e:	08 95       	ret

00000740 <__divmodhi4_neg2>:
 740:	70 95       	com	r23
 742:	61 95       	neg	r22
 744:	7f 4f       	sbci	r23, 0xFF	; 255

00000746 <__divmodhi4_exit>:
 746:	08 95       	ret
